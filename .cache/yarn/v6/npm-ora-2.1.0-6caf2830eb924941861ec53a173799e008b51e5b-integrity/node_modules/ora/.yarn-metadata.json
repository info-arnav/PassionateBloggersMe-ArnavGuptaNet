{
  "manifest": {
    "name": "ora",
    "version": "2.1.0",
    "description": "Elegant terminal spinner",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/ora.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "test": "xo && ava"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "cli",
      "spinner",
      "spinners",
      "terminal",
      "term",
      "console",
      "ascii",
      "unicode",
      "loading",
      "indicator",
      "progress",
      "busy",
      "wait",
      "idle"
    ],
    "dependencies": {
      "chalk": "^2.3.1",
      "cli-cursor": "^2.1.0",
      "cli-spinners": "^1.1.0",
      "log-symbols": "^2.2.0",
      "strip-ansi": "^4.0.0",
      "wcwidth": "^1.0.1"
    },
    "devDependencies": {
      "ava": "*",
      "get-stream": "^3.0.0",
      "xo": "*"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ora-2.1.0-6caf2830eb924941861ec53a173799e008b51e5b-integrity/node_modules/ora/package.json",
    "readmeFilename": "readme.md",
    "readme": "# ora [![Build Status](https://travis-ci.org/sindresorhus/ora.svg?branch=master)](https://travis-ci.org/sindresorhus/ora)\n\n> Elegant terminal spinner\n\n<p align=\"center\">\n\t<br>\n\t<img src=\"screenshot.svg\" width=\"500\">\n\t<br>\n</p>\n\n\n## Install\n\n```\n$ npm install ora\n```\n\n<a href=\"https://www.patreon.com/sindresorhus\">\n\t<img src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\" width=\"160\">\n</a>\n\n\n## Usage\n\n```js\nconst ora = require('ora');\n\nconst spinner = ora('Loading unicorns').start();\n\nsetTimeout(() => {\n\tspinner.color = 'yellow';\n\tspinner.text = 'Loading rainbows';\n}, 1000);\n```\n\n\n## API\n\nIt will gracefully not do anything when there's no TTY or when running in a CI.\n\n### ora([options|text])\n\nIf a string is provided, it is treated as a shortcut for [`options.text`](#text).\n\n#### options\n\nType: `Object`\n\n##### text\n\nType: `string`\n\nText to display after the spinner.\n\n##### spinner\n\nType: `string` `Object`<br>\nDefault: `dots` <img src=\"screenshot-spinner.gif\" width=\"14\">\n\nName of one of the [provided spinners](https://github.com/sindresorhus/cli-spinners/blob/master/spinners.json). See `example.js` in this repo if you want to test out different spinners.\n\nOr an object like:\n\n```js\n{\n\tinterval: 80, // optional\n\tframes: ['-', '+', '-']\n}\n```\n\n##### color\n\nType: `string`<br>\nDefault: `cyan`<br>\nValues: `black` `red` `green` `yellow` `blue` `magenta` `cyan` `white` `gray`\n\nColor of the spinner.\n\n##### hideCursor\n\nType: `boolean`<br>\nDefault: `true`\n\nSet to `false` to stop Ora from hiding the cursor.\n\n##### interval\n\nType: `number`<br>\nDefault: Provided by the spinner or `100`\n\nInterval between each frame.\n\nSpinners provide their own recommended interval, so you don't really need to specify this.\n\n##### stream\n\nType: `WritableStream`<br>\nDefault: `process.stderr`\n\nStream to write the output.\n\nYou could for example set this to `process.stdout` instead.\n\n##### enabled\n\nType: `boolean`\n\nForce enable/disable the spinner. If not specified, the spinner will be enabled if the `stream` is being run inside a TTY context (not spawned or piped) and/or not in a CI environment.\n\n### Instance\n\n#### .start([text])\n\nStart the spinner. Returns the instance. Set the current text if `text` is provided.\n\n#### .stop()\n\nStop and clear the spinner. Returns the instance.\n\n#### .succeed([text])\n\nStop the spinner, change it to a green `✔` and persist the current text, or `text` if provided. Returns the instance. See the GIF below.\n\n#### .fail([text])\n\nStop the spinner, change it to a red `✖` and persist the current text, or `text` if provided. Returns the instance. See the GIF below.\n\n#### .warn([text])\n\nStop the spinner, change it to a yellow `⚠` and persist the current text, or `text` if provided. Returns the instance.\n\n#### .info([text])\n\nStop the spinner, change it to a blue `ℹ` and persist the current text, or `text` if provided. Returns the instance.\n\n#### .isSpinning\n\nA boolean of whether the instance is currently spinning.\n\n#### .stopAndPersist([options])\n\nStop the spinner and change the symbol or text. Returns the instance. See the GIF below.\n\n##### options\n\nType: `Object`\n\n###### symbol\n\nType: `string`<br>\nDefault: `' '`\n\nSymbol to replace the spinner with.\n\n###### text\n\nType: `string`<br>\nDefault: Current text\n\nText to be persisted.\n\n<img src=\"screenshot-2.gif\" width=\"480\">\n\n#### .clear()\n\nClear the spinner. Returns the instance.\n\n#### .render()\n\nManually render a new frame. Returns the instance.\n\n#### .frame()\n\nGet a new frame.\n\n#### .text\n\nChange the text.\n\n#### .color\n\nChange the spinner color.\n\n### ora.promise(action, [options|text])\n\nStarts a spinner for a promise. The spinner is stopped with `.succeed()` if the promise fulfills or with `.fail()` if it rejects. Returns the spinner instance.\n\n#### action\n\nType: `Promise`\n\n\n## Related\n\n- [cli-spinners](https://github.com/sindresorhus/cli-spinners) - Spinners for use in the terminal\n- [listr](https://github.com/SamVerschueren/listr) - Terminal task list\n- [CLISpinner](https://github.com/kiliankoe/CLISpinner) - Terminal spinner library for Swift\n- [halo](https://github.com/ManrajGrover/halo) - Python port\n- [spinners](https://github.com/FGRibreau/spinners) - Terminal spinners for Rust\n- [marquee-ora](https://github.com/joeycozza/marquee-ora) - Scrolling marquee spinner for Ora\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ora/-/ora-2.1.0.tgz#6caf2830eb924941861ec53a173799e008b51e5b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ora/-/ora-2.1.0.tgz",
    "hash": "6caf2830eb924941861ec53a173799e008b51e5b",
    "integrity": "sha512-hNNlAd3gfv/iPmsNxYoAPLvxg7HuPozww7fFonMZvL84tP6Ox5igfk5j/+a9rtJJwqMgKK+JgWsAQik5o0HTLA==",
    "registry": "npm",
    "packageName": "ora",
    "cacheIntegrity": "sha512-hNNlAd3gfv/iPmsNxYoAPLvxg7HuPozww7fFonMZvL84tP6Ox5igfk5j/+a9rtJJwqMgKK+JgWsAQik5o0HTLA== sha1-bK8oMOuSSUGGHsU6FzeZ4Ai1Hls="
  },
  "registry": "npm",
  "hash": "6caf2830eb924941861ec53a173799e008b51e5b"
}