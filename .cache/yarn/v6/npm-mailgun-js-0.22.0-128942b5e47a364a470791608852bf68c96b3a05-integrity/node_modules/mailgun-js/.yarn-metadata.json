{
  "manifest": {
    "name": "mailgun-js",
    "description": "Simple Node.js helper module for Mailgun API",
    "keywords": [
      "email",
      "mailgun"
    ],
    "version": "0.22.0",
    "homepage": "https://github.com/bojand/mailgun-js",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/bojand/mailgun-js.git"
    },
    "bugs": {
      "url": "http://github.com/bojand/mailgun-js/issues"
    },
    "engines": {
      "node": ">=6.0.0"
    },
    "main": "./lib/mailgun.js",
    "dependencies": {
      "async": "^2.6.1",
      "debug": "^4.1.0",
      "form-data": "^2.3.3",
      "inflection": "~1.12.0",
      "is-stream": "^1.1.0",
      "path-proxy": "~1.0.0",
      "promisify-call": "^2.0.2",
      "proxy-agent": "^3.0.3",
      "tsscmp": "^1.0.6"
    },
    "author": {
      "name": "Bojan Djurkovic",
      "email": "dbojan@gmail.com"
    },
    "devDependencies": {
      "clone": "^2.1.2",
      "mocha": "~5.2.0",
      "nodemailer": "^4.6.8",
      "request": "^2.88.0",
      "sinon": "^7.1.0",
      "standard": "^12.0.0"
    },
    "scripts": {
      "test": "npm run lint && npm run mocha",
      "mocha": "mocha --ui exports --slow 1500ms --timeout 10000ms --reporter spec",
      "lint": "standard lib/**/*.js && standard --env mocha test/**/*.js",
      "lint:fix": "standard --fix lib/**/*.js && standard --env mocha --fix test/**/*.js",
      "docs": "./bin/docs"
    },
    "standard": {
      "env": {
        "node": true,
        "mocha": true
      }
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-mailgun-js-0.22.0-128942b5e47a364a470791608852bf68c96b3a05-integrity/node_modules/mailgun-js/package.json",
    "readmeFilename": "README.md",
    "readme": "# mailgun.js\n\nSimple Node.js module for [Mailgun](http://www.mailgun.com).\n\n[![npm version](https://img.shields.io/npm/v/mailgun-js.svg?style=flat-square)](https://www.npmjs.com/package/mailgun-js)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg?style=flat-square)](https://standardjs.com)\n[![License](https://img.shields.io/github/license/bojand/mailgun-js.svg?style=flat-square)](https://raw.githubusercontent.com/bojand/mailgun-js/master/LICENSE.txt)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat-square)](https://www.paypal.me/bojandj)\n[![Buy me a coffee](https://img.shields.io/badge/buy%20me-a%20coffee-orange.svg?style=flat-square)](https://www.buymeacoffee.com/bojand)\n\n## Installation\n\n`npm install mailgun-js`\n\n## Usage overview\n\nThis is a simple Node.js module for interacting with the [Mailgun](http://www.mailgun.com) API. This module is intended to be used within Node.js environment and **not** from the browser. For browser use the [mailgun.js](https://github.com/mailgun/mailgun-js) module.\n\nPlease see [Mailgun Documentation](https://documentation.mailgun.com) for full Mailgun API reference.\n\nThis module works by providing proxy objects for interacting with different resources through the Mailgun API.\nMost methods take a `data` parameter, which is a Javascript object that would contain the arguments for the Mailgun API.\nAll methods take a final parameter callback with two parameters: `error`, and `body`.\nWe try to parse the `body` into a javascript object, and return it to the callback as such for easier use and inspection by the client.\nIf there was an error a new `Error` object will be passed to the callback in the `error` parameter.\nIf the error originated from the (Mailgun) server, the response code will be available in the `statusCode` property\nof the `error` object passed in the callback.\nSee the `/docs` folder for detailed documentation. For full usage examples see the `/test` folder.\n\n```js\nvar api_key = 'XXXXXXXXXXXXXXXXXXXXXXX';\nvar domain = 'www.mydomain.com';\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!'\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nNote that the `to` field is required and should be a string containing 1 or more comma-separated addresses. Additionally `cc` and `bcc` fields can be specified. Recipients in those fields will be addressed as such.  See https://documentation.mailgun.com/api-sending.html#sending for additional details.\n\nMessages stored using the Mailgun `store()` action can be retrieved using `messages(<message_key>).info()` function.\nOptionally the MIME representation of the message can be retrieved if `MIME` argument is passed in and set to `true`.\n\nSomething more elaborate. Get mailing list info, create a member and get mailing list members and update member.\nNotice that the proxy objects can be reused.\n\n```js\nvar list = mailgun.lists('mylist@mycompany.com');\n\nlist.info(function (err, data) {\n  // `data` is mailing list info\n  console.log(data);\n});\n\nvar bob = {\n  subscribed: true,\n  address: 'bob@gmail.com',\n  name: 'Bob Bar',\n  vars: {age: 26}\n};\n\nlist.members().create(bob, function (err, data) {\n  // `data` is the member details\n  console.log(data);\n});\n\nlist.members().list(function (err, members) {\n  // `members` is the list of members\n  console.log(members);\n});\n\nlist.members('bob@gmail.com').update({ name: 'Foo Bar' }, function (err, body) {\n  console.log(body);\n});\n\nlist.members('bob@gmail.com').delete(function (err, data) {\n  console.log(data);\n});\n```\n\n#### Options\n\n`Mailgun` object constructor options:\n\n* `apiKey` - Your Mailgun API KEY\n* `publicApiKey` - Your public Mailgun API KEY\n* `domain` - Your Mailgun Domain (Please note: domain field is `MY-DOMAIN-NAME.com`, not https://api.mailgun.net/v3/MY-DOMAIN-NAME.com)\n* `mute` - Set to `true` if you wish to mute the console error logs in `validateWebhook()` function\n* `proxy` - The proxy URI in format `http[s]://[auth@]host:port`. ex: `'http://proxy.example.com:8080'`\n* `timeout` - Request timeout in milliseconds\n* `host` - the mailgun host (default: 'api.mailgun.net'). Note that if you are using the EU region the host should be set to  'api.eu.mailgun.net'\n* `protocol` - the mailgun protocol (default: 'https:', possible values: 'http:' or 'https:')\n* `port` - the mailgun port (default: '443')\n* `endpoint` - the mailgun host (default: '/v3')\n* `retry` - the number of **total attempts** to do when performing requests. Default is `1`.\nThat is, we will try an operation only once with no retries on error. You can also use a config\nobject compatible with the `async` library for more control as to how the retries take place.\nSee docs [here](https://caolan.github.io/async/docs.html#retry)\n* `testMode` - turn test mode on. If test mode is on, no requests are made, rather the request options and data is logged\n* `testModeLogger` - custom test mode logging function\n\n\n#### Attachments\n\nAttachments can be sent using either the `attachment` or `inline` parameters. `inline` parameter can be use to send an\nattachment with `inline` disposition. It can be used to send inline images. Both types are supported with same mechanisms\nas described, we will just use `attachment` parameter in the documentation below but same stands for `inline`.\n\nSending attachments can be done in a few ways. We can use the path to a file in the `attachment` parameter.\nIf the `attachment` parameter is of type `string` it is assumed to be the path to a file.\n\n```js\nvar filepath = path.join(__dirname, 'mailgun_logo.png');\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!',\n  attachment: filepath\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nWe can pass a buffer (has to be a `Buffer` object) of the data. If a buffer is used the data will be attached using a\ngeneric filename \"file\".\n\n```js\nvar filepath = path.join(__dirname, 'mailgun_logo.png');\nvar file = fs.readFileSync(filepath);\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!',\n  attachment: file\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nWe can also pass in a stream of the data. This is useful if you're attaching a file from the internet.\n\n```js\nvar request = require('request');\nvar file = request(\"https://www.google.ca/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\");\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!',\n  attachment: file\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nFinally we provide a `Mailgun.Attachment` class to add attachments with a bit more customization. The Attachment\nconstructor takes an `options` object. The `options` parameters can have the following fields:\n* `data` - can be one of\n    * a string representing file path to the attachment\n    * a buffer of file data\n    * an instance of `Stream` which means it is a readable stream.\n* `filename` - the file name to be used for the attachment. Default is 'file'\n* `contentType` - the content type. Required for case of `Stream` data. Ex. `image/jpeg`.\n* `knownLength` - the content length in bytes. Required for case of `Stream` data.\n\nIf an attachment object does not satisfy those valid conditions it is ignored. Multiple attachments can be sent by\npassing an array in the `attachment` parameter. The array elements can be of any one of the valid types and each one\nwill be handled appropriately.\n\n```js\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\nvar filename = 'mailgun_logo.png';\nvar filepath = path.join(__dirname, filename);\nvar file = fs.readFileSync(filepath);\n\nvar attch = new mailgun.Attachment({data: file, filename: filename});\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!',\n  attachment: attch\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\n```js\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\nvar filename = 'mailgun_logo.png';\nvar filepath = path.join(__dirname, filename);\nvar fileStream = fs.createReadStream(filepath);\nvar fileStat = fs.statSync(filepath);\n\nmsg.attachment = new mailgun.Attachment({\n  data: fileStream,\n  filename: 'my_custom_name.png',\n  knownLength: fileStat.size,\n  contentType: 'image/png'});\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\n#### Sending MIME messages\n\nSending messages in MIME format can be accomplished using the `sendMime()` function of the `messages()` proxy object.\nThe `data` parameter for the function has to have `to` and `message` properties. The `message` property can be a full\nfile path to the MIME file, a stream of the file, or a string representation of the MIME\nmessage. To build a MIME string you can use the [nodemailer](https://www.npmjs.org/package/nodemailer) library.\nSome examples:\n\n```js\nvar domain = 'mydomain.org';\nvar mailgun = require('mailgun-js')({ apiKey: \"YOUR API KEY\", domain: domain });\nvar MailComposer = require('nodemailer/lib/mail-composer');\n\nvar mailOptions = {\n  from: 'you@samples.mailgun.org',\n  to: 'mm@samples.mailgun.org',\n  subject: 'Test email subject',\n  text: 'Test email text',\n  html: '<b> Test email text </b>'\n};\n\nvar mail = new MailComposer(mailOptions);\n\nmail.compile().build((err, message) => {\n\n    var dataToSend = {\n        to: 'mm@samples.mailgun.org',\n        message: message.toString('ascii')\n    };\n\n    mailgun.messages().sendMime(dataToSend, (sendError, body) => {\n        if (sendError) {\n            console.log(sendError);\n            return;\n        }\n    });\n});\n```\n#### Referencing MIME file\n\n```js\nvar filepath = '/path/to/message.mime';\n\nvar data = {\n  to: fixture.message.to,\n  message: filepath\n};\n\nmailgun.messages().sendMime(data, function (err, body) {\n  console.log(body);\n});\n```\n\n```js\nvar filepath = '/path/to/message.mime';\n\nvar data = {\n  to: fixture.message.to,\n  message: fs.createReadStream(filepath)\n};\n\nmailgun.messages().sendMime(data, function (err, body) {\n  console.log(body);\n});\n```\n\n#### Creating mailing list members\n\n`members().create({data})` will create a mailing list member with `data`. Mailgun also offers a resource for creating\nmembers in bulk. Doing a `POST` to `/lists/<address>/members.json` adds multiple members, up to 1,000 per call,\nto a Mailing List. This can be accomplished using `members().add()`.\n\n```js\nvar members = [\n  {\n    address: 'Alice <alice@example.com>',\n    vars: { age: 26 }\n  },\n  {\n    name: 'Bob',\n    address: 'bob@example.com',\n    vars: { age: 34 }\n  }\n];\n\nmailgun.lists('mylist@mycompany.com').members().add({ members: members, subscribed: true }, function (err, body) {\n  console.log(body);\n});\n```\n\n## Generic requests\n\nMailgun-js also provides helper methods to allow users to interact with parts of the api that are not exposed already.\nThese are not tied to the domain passed in the constructor, and thus require the full path with the domain\npassed in the `resource` argument.\n\n* `mailgun.get(resource, data, callback)` - sends GET request to the specified resource on api.\n* `mailgun.post(resource, data, callback)` - sends POST request to the specified resource on api.\n* `mailgun.delete(resource, data, callback)` - sends DELETE request to the specified resource on api.\n* `mailgun.put(resource, data, callback)` - sends PUT request to the specified resource on api.\n\nExample: Get some stats\n\n```js\nmailgun.get('/samples.mailgun.org/stats', { event: ['sent', 'delivered'] }, function (error, body) {\n  console.log(body);\n});\n```\n\n## Promises\n\nModule works with Node-style callbacks, but also implements promises with the [promisify-call](https://www.npmjs.com/package/promisify-call) library.\n\n```js\nmailgun.lists('mylist@mydomain.com').info().then(function (data) {\n  console.log(data);\n}, function (err) {\n  console.log(err);\n});\n```\n\nThe function passed as 2nd argument is optional and not needed if you don't care about the fail case.\n\n## Webhook validation\n\nThe Mailgun object also has a helper function for validating Mailgun Webhook requests\n(as per the [mailgun docs for securing webhooks](http://documentation.mailgun.com/user_manual.html#securing-webhooks)).\nThis code came from [this gist](https://gist.github.com/coolaj86/81a3b61353d2f0a2552c).\n\nExample usage:\n\n```js\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\n\nfunction router(app) {\n  app.post('/webhooks/mailgun/*', function (req, res, next) {\n    var body = req.body;\n\n    if (!mailgun.validateWebhook(body.timestamp, body.token, body.signature)) {\n      console.error('Request came, but not from Mailgun');\n      res.send({ error: { message: 'Invalid signature. Are you even Mailgun?' } });\n      return;\n    }\n\n    next();\n  });\n\n  app.post('/webhooks/mailgun/catchall', function (req, res) {\n    // actually handle request here\n  });\n}\n```\n\n## Email Addresses validation\n\nThese routes require Mailgun public API key.\nPlease check Mailgun [email validation documentation](https://documentation.mailgun.com/api-email-validation.html) for more responses details.\n\n### Validate Email Address\n\n**mailgun.validate(address, private, options, fn)**\n\nChecks if email is valid.\n\n- `private` - whether it's private validate\n- `options` - any additional options\n\nExample usage:\n\n```js\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\n\nmailgun.validate('test@mail.com', function (err, body) {\n  if(body && body.is_valid){\n    // do something\n  }\n});\n```\n\n### Parse Email Addresses list\n\nParses list of email addresses and returns two lists:\n  - parsed email addresses\n  - unparseable email addresses\n\nExample usage:\n\n```js\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\n\nmailgun.parse([ 'test@mail.com', 'test2@mail.com' ], function (err, body) {\n  if(error){\n    // handle error\n  }else{\n    // do something with parsed addresses: body.parsed;\n    // do something with unparseable addresses: body.unparseable;\n  }\n});\n```\n\n## Debug logging\n\n[debug](https://npmjs.com/package/debug) package is used for debug logging.\n\n```sh\nDEBUG=mailgun-js node app.js\n```\n\n## Test mode\n\nTest mode can be turned on using `testMode` option. When on, no requests are actually sent to Mailgun, rather we log the request options and applicable payload and form data. By default we log to `console.log`, unless `DEBUG` is turned on, in which case we use debug logging.\n\n```js\nmailgun = require('mailgun-js')({ apiKey: api_key, domain: domain, testMode: true })\n\nconst data = {\n  from: 'mailgunjs+test1@gmail.com',\n  to: 'mailgunjstest+recv1@gmail.com',\n  subject: 'Test email subject',\n  text: 'Test email text'\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\n```\noptions: { hostname: 'api.mailgun.net',\n  port: 443,\n  protocol: 'https:',\n  path: '/v3/sandbox12345.mailgun.org/messages',\n  method: 'POST',\n  headers:\n   { 'Content-Type': 'application/x-www-form-urlencoded',\n     'Content-Length': 127 },\n  auth: 'api:key-0e8pwgtt5ylx0m94xwuzqys2-o0x4-77',\n  agent: false,\n  timeout: undefined }\npayload: 'to=mailgunjs%2Btest1%40gmail.com&from=mailgunjstest%2Brecv1%40gmail.com&subject=Test%20email%20subject&text=Test%20email%20text'\nform: undefined\nundefined\n```\n\nNote that in test mode no error or body are returned as a result.\n\nThe logging can be customized using `testModeLogger` option which is a function to perform custom logging.\n\n```js\nconst logger = (httpOptions, payload, form) => {\n  const { method, path } = httpOptions\n  const hasPayload = !!payload\n  const hasForm = !!form\n\n  console.log(`%s %s payload: %s form: %s`, method, path, hasPayload, hasForm)\n}\n\nmailgun = require('mailgun-js')({ apiKey: api_key, domain: domain, testMode: true, testModeLogger: logger })\n\nconst data = {\n  from: 'mailgunjs+test1@gmail.com',\n  to: 'mailgunjstest+recv1@gmail.com',\n  subject: 'Test email subject',\n  text: 'Test email text'\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nSample output:\n\n```\nPOST /v3/sandbox12345.mailgun.org/messages payload: true form: false\nundefined\n```\n\n## Tests\n\nTo run the test suite you must first have a Mailgun account with a domain setup. Then create a file named _./test/data/auth.json_, which contains your credentials as JSON, for example:\n\n```json\n{ \"api_key\": \"XXXXXXXXXXXXXXXXXXXXXXX\", \"public_api_key\": \"XXXXXXXXXXXXXXXXXXXXXXX\", \"domain\": \"mydomain.mailgun.org\" }\n```\n\nYou should edit _./test/data/fixture.json_ and modify the data to match your context.\n\nThen install the dev dependencies and execute the test suite:\n\n```\n$ npm install\n$ npm test\n```\n\nThe tests will call Mailgun API, and will send a test email, create route(s), mailing list and mailing list member.\n\n## Notes\n\nThis project is not endorsed by or affiliated with [Mailgun](http://www.mailgun.com).\nThe general design and some code was heavily inspired by [node-heroku-client](https://github.com/jclem/node-heroku-client).\n\n## License\n\nCopyright (c) 2012 - 2017 OneLobby and Bojan D.\n\nLicensed under the MIT License.\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2012 - 2017 OneLobby and Bojan D.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mailgun-js/-/mailgun-js-0.22.0.tgz#128942b5e47a364a470791608852bf68c96b3a05",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mailgun-js/-/mailgun-js-0.22.0.tgz",
    "hash": "128942b5e47a364a470791608852bf68c96b3a05",
    "integrity": "sha512-a2alg5nuTZA9Psa1pSEIEsbxr1Zrmqx4VkgGCQ30xVh0kIH7Bu57AYILo+0v8QLSdXtCyLaS+KVmdCrQo0uWFA==",
    "registry": "npm",
    "packageName": "mailgun-js",
    "cacheIntegrity": "sha512-a2alg5nuTZA9Psa1pSEIEsbxr1Zrmqx4VkgGCQ30xVh0kIH7Bu57AYILo+0v8QLSdXtCyLaS+KVmdCrQo0uWFA== sha1-EolCteR6NkpHB5FgiFK/aMlrOgU="
  },
  "registry": "npm",
  "hash": "128942b5e47a364a470791608852bf68c96b3a05"
}