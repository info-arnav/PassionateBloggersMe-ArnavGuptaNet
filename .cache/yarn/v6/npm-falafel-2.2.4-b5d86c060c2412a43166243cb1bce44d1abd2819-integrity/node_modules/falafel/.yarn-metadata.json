{
  "manifest": {
    "name": "falafel",
    "description": "transform the ast on a recursive walk",
    "version": "2.2.4",
    "repository": {
      "type": "git",
      "url": "git://github.com/substack/node-falafel.git"
    },
    "main": "index.js",
    "keywords": [
      "ast",
      "burrito",
      "source",
      "syntax",
      "traversal",
      "tree"
    ],
    "scripts": {
      "coverage": "covert test/*.js",
      "test": "node --harmony test/bin/run.js test/*.js"
    },
    "dependencies": {
      "acorn": "^7.1.1",
      "foreach": "^2.0.5",
      "isarray": "^2.0.1",
      "object-keys": "^1.0.6"
    },
    "devDependencies": {
      "acorn-jsx": "^5.2.0",
      "covert": "^1.1.0",
      "glob": "^6.0.4",
      "safe-buffer": "^5.2.0",
      "semver": "^6.0.0",
      "tape": "^4.0.0"
    },
    "engines": {
      "node": ">=0.4.0"
    },
    "license": "MIT",
    "author": {
      "name": "James Halliday",
      "email": "mail@substack.net",
      "url": "http://substack.net"
    },
    "testling": {
      "browsers": {
        "chrome": [
          "20.0"
        ],
        "firefox": [
          "10.0",
          "15.0"
        ],
        "iexplore": [
          "6.0",
          "7.0",
          "8.0",
          "9.0"
        ],
        "opera": [
          "12.0"
        ],
        "safari": [
          "5.1"
        ]
      },
      "files": "test/*.js"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-falafel-2.2.4-b5d86c060c2412a43166243cb1bce44d1abd2819-integrity/node_modules/falafel/package.json",
    "readmeFilename": "readme.markdown",
    "readme": "# falafel\n\nTransform the [ast](http://en.wikipedia.org/wiki/Abstract_syntax_tree) on a\nrecursive walk.\n\n[![browser support](http://ci.testling.com/substack/node-falafel.png)](http://ci.testling.com/substack/node-falafel)\n\n[![build status](https://github.com/substack/node-falafel/workflows/Node%20CI/badge.svg?branch=master)](https://github.com/substack/node-falafel/actions)\n\nThis modules uses [acorn](https://npmjs.org/package/acorn) to create an AST from\nsource code.\n\n![falafel d√∂ner](./falafel.png)\n\n# example\n\n## array.js\n\nPut a function wrapper around all array literals.\n\n``` js\nvar falafel = require('falafel');\n\nvar src = '(' + function () {\n    var xs = [ 1, 2, [ 3, 4 ] ];\n    var ys = [ 5, 6 ];\n    console.dir([ xs, ys ]);\n} + ')()';\n\nvar output = falafel(src, function (node) {\n    if (node.type === 'ArrayExpression') {\n        node.update('fn(' + node.source() + ')');\n    }\n});\nconsole.log(output);\n```\n\noutput:\n\n```\n(function () {\n    var xs = fn([ 1, 2, fn([ 3, 4 ]) ]);\n    var ys = fn([ 5, 6 ]);\n    console.dir(fn([ xs, ys ]));\n})()\n```\n\n# methods\n\n``` js\nvar falafel = require('falafel')\n```\n\n## falafel(src, opts={}, fn)\n\nTransform the string source `src` with the function `fn`, returning a\nstring-like transformed output object.\n\nFor every node in the ast, `fn(node)` fires. The recursive walk is a\npost-order traversal, so children get called before their parents.\n\nPerforming a post-order traversal makes it easier to write nested transforms since\ntransforming parents often requires transforming all its children first.\n\nThe return value is string-like (it defines `.toString()` and `.inspect()`) so\nthat you can call `node.update()` asynchronously after the function has\nreturned and still capture the output.\n\nInstead of passing a `src` you can also use `opts.source`.\n\nAll of the `opts` will be passed directly to\n[acorn](https://npmjs.org/package/acorn).\n\n## custom parser\n\nYou may pass in an instance of acorn to the opts as `opts.parser` to use that\nversion instead of the version of acorn packaged with this library.\n\n```js\nvar acorn = require('acorn-jsx');\n\nfalafel(src, {parser: acorn, plugins: { jsx: true }}, function(node) {\n  // this will parse jsx\n});\n```\n\n# nodes\n\nAside from the regular [acorn](https://npmjs.org/package/acorn) data, you can also call\nsome inserted methods on nodes.\n\nAside from updating the current node, you can also reach into sub-nodes to call\nupdate functions on children from parent nodes.\n\n## node.source()\n\nReturn the source for the given node, including any modifications made to\nchildren nodes.\n\n## node.update(s)\n\nTransform the source for the present node to the string `s`.\n\nNote that in `'ForStatement'` node types, there is an existing subnode called\n`update`. For those nodes all the properties are copied over onto the\n`node.update()` function.\n\n## node.parent\n\nReference to the parent element or `null` at the root element.\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install falafel\n```\n\n# license\n\nMIT\n",
    "licenseText": "This software is released under the MIT license:\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/falafel/-/falafel-2.2.4.tgz#b5d86c060c2412a43166243cb1bce44d1abd2819",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/falafel/-/falafel-2.2.4.tgz",
    "hash": "b5d86c060c2412a43166243cb1bce44d1abd2819",
    "integrity": "sha512-0HXjo8XASWRmsS0X1EkhwEMZaD3Qvp7FfURwjLKjG1ghfRm/MGZl2r4cWUTv41KdNghTw4OUMmVtdGQp3+H+uQ==",
    "registry": "npm",
    "packageName": "falafel",
    "cacheIntegrity": "sha512-0HXjo8XASWRmsS0X1EkhwEMZaD3Qvp7FfURwjLKjG1ghfRm/MGZl2r4cWUTv41KdNghTw4OUMmVtdGQp3+H+uQ== sha1-tdhsBgwkEqQxZiQ8sbzkTRq9KBk="
  },
  "registry": "npm",
  "hash": "b5d86c060c2412a43166243cb1bce44d1abd2819"
}