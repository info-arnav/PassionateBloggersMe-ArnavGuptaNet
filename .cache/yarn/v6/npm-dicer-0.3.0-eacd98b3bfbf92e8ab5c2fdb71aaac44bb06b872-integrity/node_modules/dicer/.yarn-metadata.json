{
  "manifest": {
    "name": "dicer",
    "version": "0.3.0",
    "author": {
      "name": "Brian White",
      "email": "mscdex@mscdex.net"
    },
    "description": "A very fast streaming multipart parser for node.js",
    "main": "./lib/Dicer",
    "dependencies": {
      "streamsearch": "0.1.2"
    },
    "scripts": {
      "test": "node test/test.js"
    },
    "engines": {
      "node": ">=4.5.0"
    },
    "keywords": [
      "parser",
      "parse",
      "parsing",
      "multipart",
      "form-data",
      "streaming"
    ],
    "licenses": [
      {
        "type": "MIT",
        "url": "http://github.com/mscdex/dicer/raw/master/LICENSE"
      }
    ],
    "repository": {
      "type": "git",
      "url": "http://github.com/mscdex/dicer.git"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-dicer-0.3.0-eacd98b3bfbf92e8ab5c2fdb71aaac44bb06b872-integrity/node_modules/dicer/package.json",
    "readmeFilename": "README.md",
    "readme": "\nDescription\n===========\n\nA very fast streaming multipart parser for node.js.\n\nBenchmarks can be found [here](https://github.com/mscdex/dicer/wiki/Benchmarks).\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v4.5.0 or newer\n\n\nInstall\n============\n\n    npm install dicer\n\n\nExamples\n========\n\n* Parse an HTTP form upload\n\n```javascript\nvar inspect = require('util').inspect,\n    http = require('http');\n\nvar Dicer = require('dicer');\n\n    // quick and dirty way to parse multipart boundary\nvar RE_BOUNDARY = /^multipart\\/.+?(?:; boundary=(?:(?:\"(.+)\")|(?:([^\\s]+))))$/i,\n    HTML = Buffer.from('<html><head></head><body>\\\n                        <form method=\"POST\" enctype=\"multipart/form-data\">\\\n                         <input type=\"text\" name=\"textfield\"><br />\\\n                         <input type=\"file\" name=\"filefield\"><br />\\\n                         <input type=\"submit\">\\\n                        </form>\\\n                        </body></html>'),\n    PORT = 8080;\n\nhttp.createServer(function(req, res) {\n  var m;\n  if (req.method === 'POST'\n      && req.headers['content-type']\n      && (m = RE_BOUNDARY.exec(req.headers['content-type']))) {\n    var d = new Dicer({ boundary: m[1] || m[2] });\n\n    d.on('part', function(p) {\n      console.log('New part!');\n      p.on('header', function(header) {\n        for (var h in header) {\n          console.log('Part header: k: ' + inspect(h)\n                      + ', v: ' + inspect(header[h]));\n        }\n      });\n      p.on('data', function(data) {\n        console.log('Part data: ' + inspect(data.toString()));\n      });\n      p.on('end', function() {\n        console.log('End of part\\n');\n      });\n    });\n    d.on('finish', function() {\n      console.log('End of parts');\n      res.writeHead(200);\n      res.end('Form submission successful!');\n    });\n    req.pipe(d);\n  } else if (req.method === 'GET' && req.url === '/') {\n    res.writeHead(200);\n    res.end(HTML);\n  } else {\n    res.writeHead(404);\n    res.end();\n  }\n}).listen(PORT, function() {\n  console.log('Listening for requests on port ' + PORT);\n});\n```\n\n\nAPI\n===\n\n_Dicer_ is a _WritableStream_\n\nDicer (special) events\n----------------------\n\n* **finish**() - Emitted when all parts have been parsed and the Dicer instance has been ended.\n\n* **part**(< _PartStream_ >stream) - Emitted when a new part has been found.\n\n* **preamble**(< _PartStream_ >stream) - Emitted for preamble if you should happen to need it (can usually be ignored).\n\n* **trailer**(< _Buffer_ >data) - Emitted when trailing data was found after the terminating boundary (as with the preamble, this can usually be ignored too).\n\n\nDicer methods\n-------------\n\n* **(constructor)**(< _object_ >config) - Creates and returns a new Dicer instance with the following valid `config` settings:\n\n    * **boundary** - _string_ - This is the boundary used to detect the beginning of a new part.\n\n    * **headerFirst** - _boolean_ - If true, preamble header parsing will be performed first.\n\n    * **maxHeaderPairs** - _integer_ - The maximum number of header key=>value pairs to parse **Default:** 2000 (same as node's http).\n\n* **setBoundary**(< _string_ >boundary) - _(void)_ - Sets the boundary to use for parsing and performs some initialization needed for parsing. You should only need to use this if you set `headerFirst` to true in the constructor and are parsing the boundary from the preamble header.\n\n\n\n_PartStream_ is a _ReadableStream_\n\nPartStream (special) events\n---------------------------\n\n* **header**(< _object_ >header) - An object containing the header for this particular part. Each property value is an _array_ of one or more string values.\n",
    "license": "MIT",
    "licenseText": "Copyright Brian White. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/dicer/-/dicer-0.3.0.tgz#eacd98b3bfbf92e8ab5c2fdb71aaac44bb06b872",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/dicer/-/dicer-0.3.0.tgz",
    "hash": "eacd98b3bfbf92e8ab5c2fdb71aaac44bb06b872",
    "integrity": "sha512-MdceRRWqltEG2dZqO769g27N/3PXfcKl04VhYnBlo2YhH7zPi88VebsjTKclaOyiuMaGU72hTfw3VkUitGcVCA==",
    "registry": "npm",
    "packageName": "dicer",
    "cacheIntegrity": "sha512-MdceRRWqltEG2dZqO769g27N/3PXfcKl04VhYnBlo2YhH7zPi88VebsjTKclaOyiuMaGU72hTfw3VkUitGcVCA== sha1-6s2Ys7+/kuirXC/bcaqsRLsGuHI="
  },
  "registry": "npm",
  "hash": "eacd98b3bfbf92e8ab5c2fdb71aaac44bb06b872"
}