{
  "manifest": {
    "name": "draftjs-to-html",
    "version": "0.9.1",
    "description": "A library for draftjs to html conversion.",
    "main": "lib/draftjs-to-html.js",
    "devDependencies": {
      "@babel/core": "^7.7.5",
      "@babel/preset-env": "^7.7.6",
      "@babel/preset-react": "^7.7.4",
      "@babel/register": "^7.7.4",
      "babel-eslint": "^10.0.3",
      "autoprefixer": "^9.7.3",
      "chai": "^4.2.0",
      "enzyme": "^3.10.0",
      "draft-js": "^0.11.3",
      "eslint": "^6.7.2",
      "eslint-config-airbnb": "^18.0.1",
      "eslint-plugin-import": "^2.18.2",
      "eslint-plugin-jsx-a11y": "^6.2.3",
      "eslint-plugin-mocha": "^6.2.2",
      "eslint-plugin-react": "^7.17.0",
      "jsdom": "^15.2.1",
      "mocha": "^6.2.2",
      "react": "^16.12.0",
      "react-dom": "^16.12.0",
      "rimraf": "^3.0.0",
      "rollup": "^1.27.9",
      "react-addons-test-utils": "^15.6.2",
      "rollup-plugin-babel": "^4.3.3",
      "sinon": "^7.5.0",
      "@size-limit/preset-small-lib": "^2.2.2"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jpuri/draftjs-to-html.git"
    },
    "scripts": {
      "size": "size-limit",
      "clean": "rimraf lib",
      "build": "npm run clean && rollup -c && npm run size",
      "dev": "rollup -c -w",
      "test": "mocha --require config/test-compiler.js config/test-setup.js js/**/*Test.js",
      "lint": "eslint js",
      "check": "npm run lint"
    },
    "author": {
      "name": "Jyoti Puri"
    },
    "license": "MIT",
    "size-limit": [
      {
        "path": "lib/*",
        "webpack": false,
        "limit": "4.5 KB"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-draftjs-to-html-0.9.1-1c870fbb588d2390204cb4d0ee7e04ad0c709969-integrity/node_modules/draftjs-to-html/package.json",
    "readmeFilename": "readme.md",
    "readme": "# DraftJS TO HTML\n\nA library for converting DraftJS Editor content to plain HTML.\n\nThis is draft to HTML library I wrote for one of my projects. I am open-sourcing it so that others can also be benefitted from my work.\n\n## Installation\n\n`npm install draftjs-to-html`\n\n## Usage\n\n```js\nimport { convertToRaw } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\n\nconst rawContentState = convertToRaw(editorState.getCurrentContent());\n\nconst markup = draftToHtml(\n  rawContentState, \n  hashtagConfig, \n  directional, \n  customEntityTransform\n);\n```\nThe function parameters are:\n\n1. **contentState**: Its instance of  [RawDraftContentState](https://facebook.github.io/draft-js/docs/api-reference-data-conversion.html#content)\n\n2. **hashConfig**: Its configuration object for hashtag, its required only if hashtags are used. If the object is not defined hashtags will be output as simple text in the markdown.\n    ```js\n    hashConfig = {\n      trigger: '#',\n      separator: ' ',\n    }\n    ```\n    Here trigger is character that marks starting of hashtag (default '#') and separator is character that separates characters (default ' '). These fields in hastag object are optional.\n\n3. **directional**: Boolean, if directional is true text is aligned according to bidi algorithm. This is also optional.\n\n4. **customEntityTransform**: Its function to render custom defined entities by user, its also optional.\n\n   **editorState** is instance of DraftJS               [EditorState](https://draftjs.org/docs/api-reference-editor-state.html#content).\n\n## Supported conversions\nFollowing is the list of conversions it supports:\n\n1. Convert block types to corresponding HTML tags:\n\n    || Block Type | HTML Tag |\n    | -------- | -------- | -------- |\n    | 1 | header-one | h1 |\n    | 2 | header-two | h2 |\n    | 3 | header-three | h3 |\n    | 4 | header-four | h4 |\n    | 5 | header-five | h5 |\n    | 6 | header-six | h6 |\n    | 7 | unordered-list-item | ul |\n    | 8 | ordered-list-item | ol |\n    | 9 | blockquote | blockquote |\n    | 10 | code | pre |\n    | 11 | unstyled | p |\n\n    It performs these additional changes to text of blocks:\n    - replace blank space in beginning and end of block with `&nbsp;`\n    - replace `\\n` with `<br>`\n    - replace `<` with `&lt;`\n    - replace `>` with `&gt;`\n\n\n2. Converts ordered and unordered list blocks with depths to nested structure of `<ul>, <ol>` and `<li>`.\n\n3. Converts inline styles BOLD, ITALIC, UNDERLINE, STRIKETHROUGH, CODE, SUPERSCRIPT, SUBSCRIPT to corresponding HTML tags: `<strong>, <em>, <ins>, <code>, <sup>, <sub>`.\n\n4. Converts inline styles color, background-color, font-size, font-family to a span tag with inline style details:\n`<span style=\"color:xyz;font-size:xx\">`. (The inline styles in JSON object should start with strings `color` or `font-size` like `color-red`, `color-green` or `fontsize-12`, `fontsize-20`).\n\n5. Converts entity range of type link to anchor tag using entity data url for href, targetOption for target: `<a href=\"url\" target=\"_self\">text</a>`. Default target is `_self`.\n\n6. Converts entity range of type mention to anchor tag using entity data url for href and value for data-value, it also adds class to it: `<a href=\"url\" class=\"wysiwyg-mention\" data-mention data-value=\"value\">text</a>`.\n\n7. Converts atomic entity image to image tag using entity data src for image source, and if present alt, alignment, height, width also: `<img src=\"src\" alt=\"alt_text\" style=\"float: left, height: 50px; width: 50px\"/>`.\n\n8. Converts embedded links to iFrames, using width, height and src from entity data. `<iframe width=\"width\" height=\"height\" src=\"src\" frameBorder=\"0\"></iframe>`\n\n9. Converts hashtags to anchor tag: `<a href=\"#tag\" class=\"wysiwyg-hashtag\">#tag</a>`.\n\n9. `customEntityTransform` can be used for transformation of a custom entity block to html. If present its call to generate html for entity. It can take 2 parameter:\n   1. `entity` ( object with { type, mutalibity, data})\n   2. `text` text present in the block.\n\n10. Adding style property to block tag for block level styles like text-align: `<p style=\"text-align: right\">text</p>`.\n\n11. RTL, if directional function parameter is true, generated blocks have property `dir = \"auto\"` thus they get aligned according to bidi algorithm.\n\n## License\nMIT.\n",
    "licenseText": "Copyright (c) 2016 Jyoti Puri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/draftjs-to-html/-/draftjs-to-html-0.9.1.tgz#1c870fbb588d2390204cb4d0ee7e04ad0c709969",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/draftjs-to-html/-/draftjs-to-html-0.9.1.tgz",
    "hash": "1c870fbb588d2390204cb4d0ee7e04ad0c709969",
    "integrity": "sha512-fFstE6+IayaVFBEvaFt/wN8vdj8FsTRzij7dy7LI9QIwf5LgfHFi9zSpvCg+feJ2tbYVqHxUkjcibwpsTpgFVQ==",
    "registry": "npm",
    "packageName": "draftjs-to-html",
    "cacheIntegrity": "sha512-fFstE6+IayaVFBEvaFt/wN8vdj8FsTRzij7dy7LI9QIwf5LgfHFi9zSpvCg+feJ2tbYVqHxUkjcibwpsTpgFVQ== sha1-HIcPu1iNI5AgTLTQ7n4ErQxwmWk="
  },
  "registry": "npm",
  "hash": "1c870fbb588d2390204cb4d0ee7e04ad0c709969"
}