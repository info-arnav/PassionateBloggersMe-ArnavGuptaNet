{
  "manifest": {
    "name": "express-fileupload",
    "version": "1.2.0",
    "author": {
      "name": "Richard Girges",
      "email": "richardgirges@gmail.com"
    },
    "description": "Simple express file upload middleware that wraps around Busboy",
    "main": "./lib/index",
    "scripts": {
      "test": "istanbul cover node_modules/mocha/bin/_mocha -- -R spec",
      "lint": "eslint ./",
      "coveralls": "cat ./coverage/lcov.info | coveralls"
    },
    "dependencies": {
      "busboy": "^0.3.1"
    },
    "engines": {
      "node": ">=8.0.0"
    },
    "keywords": [
      "express",
      "file-upload",
      "upload",
      "forms",
      "multipart",
      "files",
      "busboy",
      "middleware"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/richardgirges/express-fileupload.git"
    },
    "devDependencies": {
      "body-parser": "^1.19.0",
      "coveralls": "^3.0.14",
      "eslint": "^7.5.0",
      "express": "^4.17.1",
      "istanbul": "^0.4.5",
      "md5": "^2.2.1",
      "mocha": "^8.0.1",
      "rimraf": "^3.0.2",
      "supertest": "^4.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-express-fileupload-1.2.0-integrity/node_modules/express-fileupload/package.json",
    "readmeFilename": "README.md",
    "readme": "# express-fileupload\nSimple express middleware for uploading files.\n\n[![npm](https://img.shields.io/npm/v/express-fileupload.svg)](https://www.npmjs.org/package/express-fileupload)\n[![Build Status](https://travis-ci.com/richardgirges/express-fileupload.svg?branch=master)](https://travis-ci.com/richardgirges/express-fileupload)\n[![downloads per month](http://img.shields.io/npm/dm/express-fileupload.svg)](https://www.npmjs.org/package/express-fileupload)\n[![Coverage Status](https://img.shields.io/coveralls/richardgirges/express-fileupload.svg)](https://coveralls.io/r/richardgirges/express-fileupload)\n\n# Security Notice\nPlease install version 1.1.10+ of this package to avoid a security vulnerability in Node/EJS related to JS prototype pollution. This vulnerability is only applicable if you have the `parseNested` option set to `true` (it is `false` by default).\n\n# Install\n```bash\n# With NPM\nnpm i express-fileupload\n\n# With Yarn\nyarn add express-fileupload\n```\n\n# Usage\nWhen you upload a file, the file will be accessible from `req.files`.\n\nExample:\n* You're uploading a file called **car.jpg**\n* Your input's name field is **foo**: `<input name=\"foo\" type=\"file\" />`\n* In your express server request, you can access your uploaded file from `req.files.foo`:\n```javascript\napp.post('/upload', function(req, res) {\n  console.log(req.files.foo); // the uploaded file object\n});\n```\n\nThe **req.files.foo** object will contain the following:\n* `req.files.foo.name`: \"car.jpg\"\n* `req.files.foo.mv`: A function to move the file elsewhere on your server. Can take a callback or return a promise.\n* `req.files.foo.mimetype`: The mimetype of your file\n* `req.files.foo.data`: A buffer representation of your file, returns empty buffer in case useTempFiles option was set to true.\n* `req.files.foo.tempFilePath`: A path to the temporary file in case useTempFiles option was set to true.\n* `req.files.foo.truncated`: A boolean that represents if the file is over the size limit\n* `req.files.foo.size`: Uploaded size in bytes\n* `req.files.foo.md5`: MD5 checksum of the uploaded file\n\n**Notes about breaking changes with MD5 handling:**\n\n* Before 1.0.0, `md5` is an MD5 checksum of the uploaded file.\n* From 1.0.0 until 1.1.1, `md5` is a function to compute an MD5 hash ([Read about it here.](https://github.com/richardgirges/express-fileupload/releases/tag/v1.0.0-alpha.1)).\n* From 1.1.1 onward, `md5` is reverted back to MD5 checksum value and also added full MD5 support in case you are using temporary files.\n\n\n### Examples\n* [Example Project](https://github.com/richardgirges/express-fileupload/tree/master/example)\n* [Basic File Upload](https://github.com/richardgirges/express-fileupload/tree/master/example#basic-file-upload)\n* [Multi-File Upload](https://github.com/richardgirges/express-fileupload/tree/master/example#multi-file-upload)\n\n### Using Busboy Options\nPass in Busboy options directly to the express-fileupload middleware. [Check out the Busboy documentation here](https://github.com/mscdex/busboy#api).\n\n```javascript\napp.use(fileUpload({\n  limits: { fileSize: 50 * 1024 * 1024 },\n}));\n```\n\n### Using useTempFile Options\nUse temp files instead of memory for managing the upload process.\n\n```javascript\n// Note that this option available for versions 1.0.0 and newer. \napp.use(fileUpload({\n    useTempFiles : true,\n    tempFileDir : '/tmp/'\n}));\n```\n\n### Using debug option\n\nYou can set `debug` option to `true` to see some logging about upload process.\nIn this case middleware uses `console.log` and adds `Express-file-upload` prefix for outputs.\n\nIt will show you whether the request is invalid and also common events triggered during upload.\nThat can be really useful for troubleshooting and ***we recommend attaching debug output to each issue on Github***.\n\n***Output example:***\n\n```\nExpress-file-upload: Temporary file path is /node/express-fileupload/test/temp/tmp-16-1570084843942\nExpress-file-upload: New upload started testFile->car.png, bytes:0\nExpress-file-upload: Uploading testFile->car.png, bytes:21232...\nExpress-file-upload: Uploading testFile->car.png, bytes:86768...\nExpress-file-upload: Upload timeout testFile->car.png, bytes:86768\nExpress-file-upload: Cleaning up temporary file /node/express-fileupload/test/temp/tmp-16-1570084843942...\n```\n\n***Description:***\n\n* `Temporary file path is...` says that `useTempfiles` was set to true and also shows you temp file name and path.\n* `New upload started testFile->car.png` says that new upload started with field `testFile` and file name `car.png`.\n* `Uploading testFile->car.png, bytes:21232...` shows current progress for each new data chunk.\n* `Upload timeout` means that no data came during `uploadTimeout`.\n* `Cleaning up temporary file` Here finaly we see cleaning up of the temporary file because of upload timeout reached.\n\n### Available Options\nPass in non-Busboy options directly to the middleware. These are express-fileupload specific options.\n\nOption | Acceptable&nbsp;Values | Details\n--- | --- | ---\ncreateParentPath | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Automatically creates the directory path specified in `.mv(filePathName)`\nuriDecodeFileNames | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Applies uri decoding to file names if set true.\nsafeFileNames | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li><li>regex</li></ul> | Strips characters from the upload's filename. You can use custom regex to determine what to strip. If set to `true`, non-alphanumeric characters _except_ dashes and underscores will be stripped. This option is off by default.<br /><br />**Example #1 (strip slashes from file names):** `app.use(fileUpload({ safeFileNames: /\\\\/g }))`<br />**Example #2:** `app.use(fileUpload({ safeFileNames: true }))`\npreserveExtension | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li><li><code>*Number*</code></li></ul> | Preserves filename extension when using <code>safeFileNames</code> option. If set to <code>true</code>, will default to an extension length of 3. If set to <code>*Number*</code>, this will be the max allowable extension length. If an extension is smaller than the extension length, it remains untouched. If the extension is longer, it is shifted.<br /><br />**Example #1 (true):**<br /><code>app.use(fileUpload({ safeFileNames: true, preserveExtension: true }));</code><br />*myFileName.ext* --> *myFileName.ext*<br /><br />**Example #2 (max extension length 2, extension shifted):**<br /><code>app.use(fileUpload({ safeFileNames: true, preserveExtension: 2 }));</code><br />*myFileName.ext* --> *myFileNamee.xt*\nabortOnLimit | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Returns a HTTP 413 when the file is bigger than the size limit if true. Otherwise, it will add a <code>truncated = true</code> to the resulting file structure.\nresponseOnLimit | <ul><li><code>'File size limit has been reached'</code>&nbsp;**(default)**</li><li><code>*String*</code></ul> | Response which will be send to client if file size limit exceeded when abortOnLimit set to true.\nlimitHandler | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>function(req, res, next)</code></li></ul> | User defined limit handler which will be invoked if the file is bigger than configured limits.\nuseTempFiles | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | By default this module uploads files into RAM. Setting this option to True turns on using temporary files instead of utilising RAM. This avoids memory overflow issues when uploading large files or in case of uploading lots of files at same time.\ntempFileDir | <ul><li><code>String</code>&nbsp;**(path)**</li></ul> | Path to store temporary files.<br />Used along with the <code>useTempFiles</code> option. By default this module uses 'tmp' folder in the current working directory.<br />You can use trailing slash, but it is not necessary.\nparseNested | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li></ul> | By default, req.body and req.files are flattened like this: <code>{'name': 'John', 'hobbies[0]': 'Cinema', 'hobbies[1]': 'Bike'}</code><br /><br/>When this option is enabled they are parsed in order to be nested like this: <code>{'name': 'John', 'hobbies': ['Cinema', 'Bike']}</code>\ndebug | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Turn on/off upload process logging. Can be useful for troubleshooting.\nuploadTimeout | <ul><li><code>60000</code>&nbsp;**(default)**</li><li><code>Integer</code></ul> | This defines how long to wait for data before aborting. Set to 0 if you want to turn off timeout checks.\n\n# Help Wanted\nLooking for additional maintainers. Please contact `richardgirges [ at ] gmail.com` if you're interested. Pull Requests are welcomed! \n\n# Thanks & Credit\n[Brian White](https://github.com/mscdex) for his stellar work on the [Busboy Package](https://github.com/mscdex/busboy) and the [connect-busboy Package](https://github.com/mscdex/connect-busboy)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Richard Girges\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/express-fileupload/-/express-fileupload-1.2.0.tgz",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/express-fileupload/-/express-fileupload-1.2.0.tgz",
    "hash": "",
    "integrity": "sha512-oe4WpKcSppXnl5peornawWUa6tKmIc1/kJxMNRGJR1A0v4zyLL6VsFR6wZ8P2a4Iq3aGx8xae3Vlr+MOMQhFPw==",
    "registry": "npm",
    "packageName": "express-fileupload",
    "cacheIntegrity": "sha512-oe4WpKcSppXnl5peornawWUa6tKmIc1/kJxMNRGJR1A0v4zyLL6VsFR6wZ8P2a4Iq3aGx8xae3Vlr+MOMQhFPw== sha1-NWxN/WRb5xq5+y9ObYTusA0keXk="
  },
  "registry": "npm",
  "hash": "a1ee16a4a712a695e7979a5ea2b9dac1651aead2a621cd7f909c4c351189475034bf8cf22cbe95b0547ac19f0fd9ae08ab7686c7cc5a7b7565afe30e3108453f"
}