{
  "manifest": {
    "name": "react-google-recaptcha",
    "version": "2.1.0",
    "description": "React Component Wrapper for Google reCAPTCHA",
    "main": "lib/index.js",
    "module": "lib/esm/index.js",
    "scripts": {
      "build": "rm -rf lib && npm run build:cjs && npm run build:esm",
      "build:cjs": "babel src --out-dir lib",
      "build:esm": "cross-env BABEL_ENV=esm babel src --out-dir lib/esm",
      "prepare": "npm run build",
      "pretty": "prettier --write src/*.js ./*.js test/*.js",
      "lint": "eslint ./",
      "lint:fix": "eslint ./ --fix",
      "test": "cross-env BABEL_ENV=development jest"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/dozoisch/react-google-recaptcha.git"
    },
    "keywords": [
      "react",
      "react-component",
      "captcha",
      "recaptcha",
      "google-recaptcha"
    ],
    "author": {
      "name": "Hugo Dozois",
      "email": "hugo@dozoisch.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dozoisch/react-google-recaptcha/issues"
    },
    "homepage": "https://github.com/dozoisch/react-google-recaptcha",
    "peerDependencies": {
      "react": ">=16.4.1"
    },
    "devDependencies": {
      "@babel/cli": "^7.6.4",
      "@babel/core": "^7.6.4",
      "@babel/preset-env": "^7.6.3",
      "@babel/preset-react": "^7.6.3",
      "babel-eslint": "^10.0.3",
      "cross-env": "^5.2.1",
      "eslint": "^5.16.0",
      "eslint-config-prettier": "^3.6.0",
      "eslint-plugin-prettier": "^2.7.0",
      "jest": "^24.9.0",
      "prettier": "1.14.2",
      "react": "^16.11.0",
      "react-dom": "^16.11.0"
    },
    "dependencies": {
      "prop-types": "^15.5.0",
      "react-async-script": "^1.1.1"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-react-google-recaptcha-2.1.0-9f6f4954ce49c1dedabc2c532347321d892d0a16-integrity/node_modules/react-google-recaptcha/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-google-recaptcha\n\n[![Build Status][travis.img]][travis.url] [![npm version][npm.img]][npm.url] [![npm downloads][npm.dl.img]][npm.dl.url] [![Dependencies][deps.img]][deps.url]\n\n[![Edit react-google-recaptcha example](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/1y4zzjq37l)\n\nReact component for [Google reCAPTCHA v2][reCAPTCHA].\n\n## Installation\n\n```shell\nnpm install --save react-google-recaptcha\n```\n\n## Usage\n\nAll you need to do is [sign up for an API key pair][signup]. You will need the client key then you can use `<ReCAPTCHA />`.\n\nThe default usage imports a wrapped component that loads the google recaptcha script asynchronously then instantiates a `reCAPTCHA` the user can then interact with.\n\nCode Example:\n```jsx\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nfunction onChange(value) {\n  console.log(\"Captcha value:\", value);\n}\n\nReactDOM.render(\n  <ReCAPTCHA\n    sitekey=\"Your client site key\"\n    onChange={onChange}\n  />,\n  document.body\n);\n```\n\n### Component Props\n\nProperties used to customise the rendering:\n\n| Name | Type | Description |\n|:---- | ---- | ------ |\n| sitekey | string | The API client key |\n| onChange | func | The function to be called when the user successfully completes the captcha |\n| theme | enum | *optional* `light` or `dark` The theme of the widget *(__defaults:__ `light`)*. See [example][docs_theme]\n| type | enum | *optional* `image` or `audio` The type of initial captcha *(__defaults:__ `image`)*\n| tabindex | number | *optional* The tabindex on the element *(__default:__ `0`)*\n| onExpired | func | *optional* callback when the challenge is expired and has to be redone by user. By default it will call the onChange with null to signify expired callback. |\n| onErrored | func | *optional* callback when the challenge errored, most likely due to network issues. |\n| stoken | string | *optional* set the stoken parameter, which allows the captcha to be used from different domains, see [reCAPTCHA secure-token] |\n| hl | string | *optional* set the hl parameter, which allows the captcha to be used from different languages, see [reCAPTCHA hl] |\n| size | enum | *optional* `compact`, `normal` or `invisible`. This allows you to change the size or do an invisible captcha |\n| badge | enum | *optional* `bottomright`, `bottomleft` or `inline`. Positions reCAPTCHA badge. *Only for invisible reCAPTCHA* |\n\n### Component Instance API\n\nThe component instance also has some utility functions that can be called. These can be accessed via `ref`.\n\n- `getValue()` returns the value of the captcha field\n- `getWidgetId()` returns the recaptcha widget Id\n- `reset()` forces reset. See the [JavaScript API doc][js_api]\n- `execute()` programmatically invoke the challenge\n  - need to call when using `\"invisible\"` reCAPTCHA - [example below](#invisible-recaptcha)\n- `executeAsync()` programmatically invoke the challenge and return a promise that resolves to the token or errors(if encountered).\n  - alternative approach to `execute()` in combination with the `onChange()` prop - [example below](#invisible-recaptcha)\n\nExample:\n```javascript\nconst recaptchaRef = React.createRef();\n...\nonSubmit = () => {\n  const recaptchaValue = recaptchaRef.current.getValue();\n  this.props.onSubmit(recaptchaValue);\n}\nrender() {\n  return (\n    <form onSubmit={this.onSubmit} >\n      <ReCAPTCHA\n        ref={recaptchaRef}\n        sitekey=\"Your client site key\"\n        onChange={onChange}\n      />\n    </form>\n  )\n}\n```\n\n### Invisible reCAPTCHA\n\n[Invisible reCAPTCHA](https://developers.google.com/recaptcha/docs/versions)\n\nSee the [reCAPTCHA documentation](https://developers.google.com/recaptcha/docs/invisible) to see how to configure it.\n\nWith the invisible option, you need to handle things a bit differently. You will need to call the `execute` method yourself.\n\n```jsx\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nconst recaptchaRef = React.createRef();\n\nReactDOM.render(\n  <form onSubmit={() => { recaptchaRef.current.execute(); }}>\n    <ReCAPTCHA\n      ref={recaptchaRef}\n      size=\"invisible\"\n      sitekey=\"Your client site key\"\n      onChange={onChange}\n    />\n  </form>,\n  document.body\n);\n```\n\nAdditionally, you can use the `executeAsync` method to use a promise based approach.\n\n```jsx\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\n\nconst ReCAPTCHAForm = (props) => {\n  const recaptchaRef = React.useRef();\n\n  const onSubmitWithReCAPTCHA = async () => {\n    const token = await recaptchaRef.current.executeAsync();\n\n    // apply to form data\n  }\n\n  return (\n    <form onSubmit={onSubmitWithReCAPTCHA}>\n      <ReCAPTCHA\n        ref={recaptchaRef}\n        size=\"invisible\"\n        sitekey=\"Your client site key\"\n      />\n    </form>\n  )\n\n}\n\nReactDOM.render(\n  <ReCAPTCHAForm />,\n  document.body\n);\n```\n\n\n### Advanced usage\n\n#### Global properties used by reCaptcha\n\n__useRecaptchaNet__: If google.com is blocked, you can set `useRecaptchaNet` to `true` so that the component uses recaptcha.net instead.\n\n\nExample global properties:\n```js\nwindow.recaptchaOptions = {\n  useRecaptchaNet: true,\n};\n```\n\n#### ReCaptcha loading google recaptcha script manually\n\nYou can also use the barebone components doing the following. Using that component will oblige you to manage the grecaptcha dep and load the script by yourself.\n\n```jsx\nimport { ReCAPTCHA } from \"react-google-recaptcha\";\n\nconst grecaptchaObject = window.grecaptcha // You must provide access to the google grecaptcha object.\n\nrender(\n  <ReCAPTCHA\n    ref={(r) => this.recaptcha = r}\n    sitekey=\"Your client site key\"\n    grecaptcha={grecaptchaObject}\n  />,\n  document.body\n);\n```\n\n## Migrate to 2.0\n\n- __options.removeOnUnmount__: *REMOVED* This was only useful for the lang changes. Lang is now changed through the `hl` prop.\n- __options.lang__: *REMOVED* Instead pass it as the `hl` prop on the component.\n\n\n## Notes on Requirements\nAt least `React@16.4.1` is required due to `forwardRef` usage in the dependency [react-async-script](https://github.com/dozoisch/react-async-script).\n\n## Notes\n\nPre `1.0.0` and `React < 16.4.1` support details in [0.14.0](https://github.com/dozoisch/react-google-recaptcha/tree/v0.14.0).\n\n[travis.img]: https://travis-ci.org/dozoisch/react-google-recaptcha.svg?branch=master\n[travis.url]: https://travis-ci.org/dozoisch/react-google-recaptcha\n[npm.img]: https://badge.fury.io/js/react-google-recaptcha.svg\n[npm.url]: http://badge.fury.io/js/react-google-recaptcha\n[npm.dl.img]: https://img.shields.io/npm/dm/react-google-recaptcha.svg\n[npm.dl.url]: https://www.npmjs.com/package/react-google-recaptcha\n[deps.img]: https://david-dm.org/dozoisch/react-google-recaptcha.svg\n[deps.url]: https://david-dm.org/dozoisch/react-google-recaptcha\n\n[reCAPTCHA]: https://developers.google.com/recaptcha/docs/display\n[signup]: http://www.google.com/recaptcha/admin\n[docs]: https://developers.google.com/recaptcha\n[docs_theme]: https://developers.google.com/recaptcha/docs/faq#can-i-customize-the-recaptcha-widget\n[js_api]: https://developers.google.com/recaptcha/docs/display#js_api\n[rb]: https://github.com/react-bootstrap/react-bootstrap/\n[reCAPTCHA secure-token]: https://developers.google.com/recaptcha/docs/secure_token\n[reCAPTCHA hl]: https://developers.google.com/recaptcha/docs/language\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Hugo Dozois\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-google-recaptcha/-/react-google-recaptcha-2.1.0.tgz#9f6f4954ce49c1dedabc2c532347321d892d0a16",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-google-recaptcha/-/react-google-recaptcha-2.1.0.tgz",
    "hash": "9f6f4954ce49c1dedabc2c532347321d892d0a16",
    "integrity": "sha512-K9jr7e0CWFigi8KxC3WPvNqZZ47df2RrMAta6KmRoE4RUi7Ys6NmNjytpXpg4HI/svmQJLKR+PncEPaNJ98DqQ==",
    "registry": "npm",
    "packageName": "react-google-recaptcha",
    "cacheIntegrity": "sha512-K9jr7e0CWFigi8KxC3WPvNqZZ47df2RrMAta6KmRoE4RUi7Ys6NmNjytpXpg4HI/svmQJLKR+PncEPaNJ98DqQ== sha1-n29JVM5Jwd7avCxTI0cyHYktChY="
  },
  "registry": "npm",
  "hash": "9f6f4954ce49c1dedabc2c532347321d892d0a16"
}