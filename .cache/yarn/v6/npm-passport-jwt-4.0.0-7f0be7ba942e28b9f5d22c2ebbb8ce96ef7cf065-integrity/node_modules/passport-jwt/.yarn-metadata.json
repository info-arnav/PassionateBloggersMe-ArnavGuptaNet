{
  "manifest": {
    "name": "passport-jwt",
    "version": "4.0.0",
    "description": "Passport authentication strategy using JSON Web Tokens",
    "main": "./lib",
    "scripts": {
      "test": "./node_modules/.bin/mocha --reporter spec --require test/bootstrap test/*test.js",
      "testcov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter spec --require test/bootstrap test/*test.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/themikenicholson/passport-jwt.git"
    },
    "keywords": [
      "Passport",
      "Strategy",
      "JSON",
      "Web",
      "Token",
      "JWT"
    ],
    "author": {
      "name": "Mike Nicholson"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/themikenicholson/passport-jwt/issues"
    },
    "homepage": "https://github.com/themikenicholson/passport-jwt",
    "devDependencies": {
      "chai": "^3.0.0",
      "chai-passport-strategy": "^1.0.0",
      "istanbul": "^0.4.5",
      "mocha": "^3.0.0",
      "sinon": "^1.0.0"
    },
    "dependencies": {
      "jsonwebtoken": "^8.2.0",
      "passport-strategy": "^1.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-passport-jwt-4.0.0-7f0be7ba942e28b9f5d22c2ebbb8ce96ef7cf065-integrity/node_modules/passport-jwt/package.json",
    "readmeFilename": "README.md",
    "readme": "# passport-jwt\n\n[![Build Status](https://travis-ci.org/themikenicholson/passport-jwt.svg?branch=master)](https://travis-ci.org/themikenicholson/passport-jwt)\n[![Code Climate](https://codeclimate.com/github/themikenicholson/passport-jwt/badges/gpa.svg)](https://codeclimate.com/github/themikenicholson/passport-jwt)\n\nA [Passport](http://passportjs.org/) strategy for authenticating with a\n[JSON Web Token](http://jwt.io).\n\nThis module lets you authenticate endpoints using a JSON web token. It is\nintended to be used to secure RESTful endpoints without sessions.\n\n## Supported By\n\nIf you want to quickly add secure token-based authentication to Node.js apps, feel free to check out Auth0's Node.js SDK and free plan at [auth0.com/overview](https://auth0.com/overview?utm_source=GHsponsor&utm_medium=GHsponsor&utm_campaign=passport-jwt&utm_content=auth) <img alt='Auth0 Logo' src='https://s3.amazonaws.com/passport-jwt-img/Auth0+logo.svg'/>\n\n## Install\n\n    npm install passport-jwt\n\n## Usage\n\n### Configure Strategy\n\nThe JWT authentication strategy is constructed as follows:\n\n    new JwtStrategy(options, verify)\n\n`options` is an object literal containing options to control how the token is\nextracted from the request or verified.\n\n* `secretOrKey` is a string or buffer containing the secret\n  (symmetric) or PEM-encoded public key (asymmetric) for verifying the token's\n  signature. REQUIRED unless `secretOrKeyProvider` is provided.\n* `secretOrKeyProvider` is a callback in the format `function secretOrKeyProvider(request, rawJwtToken, done)`,\n  which should call `done` with a secret or PEM-encoded public key (asymmetric) for the given key and request combination.\n  `done` accepts arguments in the format `function done(err, secret)`. Note it is up to the implementer to decode rawJwtToken.\n  REQUIRED unless `secretOrKey` is provided.\n* `jwtFromRequest` (REQUIRED) Function that accepts a request as the only\n  parameter and returns either the JWT as a string or *null*. See\n  [Extracting the JWT from the request](#extracting-the-jwt-from-the-request) for\n  more details.\n* `issuer`: If defined the token issuer (iss) will be verified against this\n  value.\n* `audience`: If defined, the token audience (aud) will be verified against\n  this value.\n* `algorithms`: List of strings with the names of the allowed algorithms. For instance, [\"HS256\", \"HS384\"].\n* `ignoreExpiration`: if true do not validate the expiration of the token.\n* `passReqToCallback`: If true the request will be passed to the verify\n  callback. i.e. verify(request, jwt_payload, done_callback).\n* `jsonWebTokenOptions`: passport-jwt is verifying the token using [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken).\nPass here an options object for any other option you can pass the jsonwebtoken verifier. (i.e maxAge)\n\n`verify` is a function with the parameters `verify(jwt_payload, done)`\n\n* `jwt_payload` is an object literal containing the decoded JWT payload.\n* `done` is a passport error first callback accepting arguments\n  done(error, user, info)\n\nAn example configuration which reads the JWT from the http\nAuthorization header with the scheme 'bearer':\n\n```js\nvar JwtStrategy = require('passport-jwt').Strategy,\n    ExtractJwt = require('passport-jwt').ExtractJwt;\nvar opts = {}\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\nopts.secretOrKey = 'secret';\nopts.issuer = 'accounts.examplesoft.com';\nopts.audience = 'yoursite.net';\npassport.use(new JwtStrategy(opts, function(jwt_payload, done) {\n    User.findOne({id: jwt_payload.sub}, function(err, user) {\n        if (err) {\n            return done(err, false);\n        }\n        if (user) {\n            return done(null, user);\n        } else {\n            return done(null, false);\n            // or you could create a new account\n        }\n    });\n}));\n```\n\n### Extracting the JWT from the request\n\nThere are a number of ways the JWT may be included in a request.  In order to remain as flexible as\npossible the JWT is parsed from the request by a user-supplied callback passed in as the\n`jwtFromRequest` parameter.  This callback, from now on referred to as an extractor,\naccepts a request object as an argument and returns the encoded JWT string or *null*.\n\n#### Included extractors\n\nA number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory\nfunctions return a new extractor configured with the given parameters.\n\n* ```fromHeader(header_name)``` creates a new extractor that looks for the JWT in the given http\n  header\n* ```fromBodyField(field_name)``` creates a new extractor that looks for the JWT in the given body\n  field.  You must have a body parser configured in order to use this method.\n* ```fromUrlQueryParameter(param_name)``` creates a new extractor that looks for the JWT in the given\n  URL query parameter.\n* ```fromAuthHeaderWithScheme(auth_scheme)``` creates a new extractor that looks for the JWT in the\n  authorization header, expecting the scheme to match auth_scheme.\n* ```fromAuthHeaderAsBearerToken()``` creates a new extractor that looks for the JWT in the authorization header\n  with the scheme 'bearer'\n* ```fromExtractors([array of extractor functions])``` creates a new extractor using an array of\n  extractors provided. Each extractor is attempted in order until one returns a token.\n\n### Writing a custom extractor function\n\nIf the supplied extractors don't meet your needs you can easily provide your own callback. For\nexample, if you are using the cookie-parser middleware and want to extract the JWT in a cookie\nyou could use the following function as the argument to the jwtFromRequest option:\n\n```\nvar cookieExtractor = function(req) {\n    var token = null;\n    if (req && req.cookies)\n    {\n        token = req.cookies['jwt'];\n    }\n    return token;\n};\n```\n\n### Authenticate requests\n\nUse `passport.authenticate()` specifying `'JWT'` as the strategy.\n\n```js\napp.post('/profile', passport.authenticate('jwt', { session: false }),\n    function(req, res) {\n        res.send(req.user.profile);\n    }\n);\n```\n\n### Include the JWT in requests\n\nThe strategy will first check the request for the standard *Authorization*\nheader. If this header is present and the scheme matches `options.authScheme`\nor 'JWT' if no auth scheme was specified then the token will be retrieved from\nit. e.g.\n\n    Authorization: JWT JSON_WEB_TOKEN_STRING.....\n\nIf the authorization header with the expected scheme is not found, the request\nbody will be checked for a field matching either `options.tokenBodyField` or\n`auth_token` if the option was not specified.\n\nFinally, the URL query parameters will be checked for a field matching either\n`options.tokenQueryParameterName` or `auth_token` if the option was not\nspecified.\n\n## Migrating\n\nThe the [Migration Guide](docs/migrating.md) for help upgrading to the latest\nmajor version of passport-jwt\n\n## Tests\n\n    npm install\n    npm test\n\nTo generate test-coverage reports:\n\n    npm install -g istanbul\n    npm run-script testcov\n    istanbul report\n\n## License\n\nThe [MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2015 Mike Nicholson\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 themikenicholson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/passport-jwt/-/passport-jwt-4.0.0.tgz#7f0be7ba942e28b9f5d22c2ebbb8ce96ef7cf065",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/passport-jwt/-/passport-jwt-4.0.0.tgz",
    "hash": "7f0be7ba942e28b9f5d22c2ebbb8ce96ef7cf065",
    "integrity": "sha512-BwC0n2GP/1hMVjR4QpnvqA61TxenUMlmfNjYNgK0ZAs0HK4SOQkHcSv4L328blNTLtHq7DbmvyNJiH+bn6C5Mg==",
    "registry": "npm",
    "packageName": "passport-jwt",
    "cacheIntegrity": "sha512-BwC0n2GP/1hMVjR4QpnvqA61TxenUMlmfNjYNgK0ZAs0HK4SOQkHcSv4L328blNTLtHq7DbmvyNJiH+bn6C5Mg== sha1-fwvnupQuKLn10iwuu7jOlu988GU="
  },
  "registry": "npm",
  "hash": "7f0be7ba942e28b9f5d22c2ebbb8ce96ef7cf065"
}