{
  "manifest": {
    "name": "react-loading-skeleton",
    "version": "2.1.1",
    "license": "MIT",
    "author": {
      "name": "David Tang"
    },
    "private": false,
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "files": [
      "lib/"
    ],
    "sideEffects": false,
    "browserslist": [
      "maintained node versions",
      "> 0.25%",
      "not dead"
    ],
    "keywords": [
      "react",
      "loading",
      "skeleton",
      "progress",
      "spinner"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/dvtng/react-loading-skeleton.git"
    },
    "scripts": {
      "start": "yarn run storybook",
      "test": "jest",
      "build": "babel src --out-dir lib --delete-dir-on-start --ignore \"src/**/*.test.js\" && cp src/index.d.ts lib",
      "storybook": "start-storybook -p 8080",
      "prepublishOnly": "yarn run build"
    },
    "jest": {
      "roots": [
        "<rootDir>/src/"
      ],
      "setupFiles": [
        "<rootDir>/testSetup/testSetup.js"
      ]
    },
    "dependencies": {
      "@emotion/core": "^10.0.22"
    },
    "peerDependencies": {
      "react": "^15.6.1 || ^16.0.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.6.2",
      "@babel/core": "^7.7.2",
      "@babel/plugin-proposal-class-properties": "^7.7.0",
      "@babel/preset-env": "^7.7.1",
      "@babel/preset-react": "^7.7.0",
      "@emotion/babel-preset-css-prop": "^10.0.17",
      "@storybook/react": "^5.2.6",
      "@types/react": "^16.9.11",
      "babel-loader": "^8.0.6",
      "enzyme": "^3.1.0",
      "enzyme-adapter-react-16": "^1.15.1",
      "jest": "^24.9.0",
      "prop-types": "^15.5.10",
      "react": "^16.12.0",
      "react-dom": "^16.12.0",
      "react-test-renderer": "^16.12.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-react-loading-skeleton-2.1.1-integrity/node_modules/react-loading-skeleton/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-loading-skeleton\n\nMake beautiful, animated loading skeletons that automatically adapt to your app.\n\n![Gif of skeleton in action](https://media.giphy.com/media/l0Iyk4bAAjac3AU2k/giphy.gif)\n\n## Basic usage\n\nInstall by `npm`/`yarn` with `react-loading-skeleton`.\n\n```javascript\nimport Skeleton from 'react-loading-skeleton';\n\n<Skeleton/> // Simple, single-line loading skeleton\n<Skeleton count={5}/> // Five-line loading skeleton\n```\n\n## Principles\n\n### Adapts to the styles you have defined\n\nThe `<Skeleton>` component is designed to be used directly in your components,\nin place of content while it's still loading.\nUnlike other libraries, rather than meticulously crafting a skeleton screen to\nmatch the `font-size`, `line-height` or `margin`s your content takes on,\nuse a `<Skeleton>` component to have it automatically fill the correct dimensions.\n\nFor example:\n\n```javascript\nclass Blogpost extends Component {\n  render() {\n    return (\n      <div style={{ fontSize: 20, lineHeight: 2 }}>\n        <h1>{this.props.title || <Skeleton />}</h1>\n        {this.props.body || <Skeleton count={10} />}\n      </div>\n    );\n  }\n}\n```\n\n...will produce the correctly-sized skeletons for the heading and body sections\nwithout any further configuration of the `<Skeleton>` component.\n\nThis ensures the loading state remains up-to-date with any changes\nto your layout or typography.\n\n### Don't make dedicated skeleton screens\n\nInstead, make components with _built-in_ skeleton states.\n\nIn addition to keeping the styling in-sync, here are some other reasons to do this:\n\n1.  Components represent all possible states it can be in - loading included.\n1.  It allows for more flexible loading patterns - in the `Blogpost` example, it's possible to have the `title` load first, and then the `body`, while having both pieces of content show loading skeletons at the right time.\n\n## Theming\n\nUsing a `<SkeletonTheme>` component, you can easily change the colors of all\nskeleton components below it in the React hierarchy:\n\n```javascript\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\n\n<SkeletonTheme color=\"#202020\" highlightColor=\"#444\">\n  <p>\n    <Skeleton count={3} />\n  </p>\n</SkeletonTheme>;\n```\n\n## Duration\n\n```javascript\n<Skeleton duration={2} />\n```\n\n`duration`: Number, defaults to 1.2\n\nDuration is how long it takes do one cycle of the skeleton animation.\n\n## Width\n\n`width`: Number | String | null, defaults to null\n\n```javascript\n<Skeleton width={100} />\n```\n\nWidth of the skeleton. Useful when the skeleton is inside an inline element with\nno width of its own.\n\n## Height\n\n`Height`: Number | String | null, defaults to null\n\n```javascript\n<Skeleton height={100} />\n```\n\nHeight of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance\na card. Also needed for the prop `circle` (see below).\n\n## Circle\n\n`Circle`: Boolean | false, defaults to false\n\n```javascript\n<Skeleton circle={true} height={50} width={50} />\n```\n\nProp for making the skeleton look like a circle, for when you are creating a user card with a profile picture for instance.\n",
    "description": "Make beautiful, animated loading skeletons that automatically adapt to your app.",
    "licenseText": "Copyright 2017 David Tang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-loading-skeleton/-/react-loading-skeleton-2.1.1.tgz",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-loading-skeleton/-/react-loading-skeleton-2.1.1.tgz",
    "hash": "",
    "integrity": "sha512-+fGvgG9ieUw4D5QVgpqJkJ75jhzUdz96GRsA0HjTlR0Mpj9DJUEFc0AKELs7ZkqWVH8/DiroaaufSrOPld1kGA==",
    "registry": "npm",
    "packageName": "react-loading-skeleton",
    "cacheIntegrity": "sha512-+fGvgG9ieUw4D5QVgpqJkJ75jhzUdz96GRsA0HjTlR0Mpj9DJUEFc0AKELs7ZkqWVH8/DiroaaufSrOPld1kGA== sha1-LAdeqWg1h8FjQIyO7AcDBHxCA7E="
  },
  "registry": "npm",
  "hash": "f9f1af806f62794c380f9415829a89909ef98e1cd4773f7a191b00d078d3951d0ca63f4325410573400a10bb3b664a96547f3f0e2ae869ab9f4ab38f95dd6418"
}