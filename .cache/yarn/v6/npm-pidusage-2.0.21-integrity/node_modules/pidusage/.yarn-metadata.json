{
  "manifest": {
    "name": "pidusage",
    "version": "2.0.21",
    "description": "Cross-platform process cpu % and memory usage of a PID",
    "license": "MIT",
    "homepage": "https://github.com/soyuka/pidusage",
    "repository": {
      "type": "git",
      "url": "https://github.com/soyuka/pidusage.git"
    },
    "bugs": {
      "url": "https://github.com/soyuka/pidusage/issues"
    },
    "author": {
      "name": "soyuka"
    },
    "contributors": [
      {
        "name": "Simone Primarosa",
        "email": "simonepri@outlook.com",
        "url": "https://simoneprimarosa.com"
      }
    ],
    "main": "index.js",
    "files": [
      "lib",
      "index.js"
    ],
    "engines": {
      "node": ">=8"
    },
    "scripts": {
      "lint": "standard",
      "test": "nyc ava -m \"!*benchmark*\"",
      "alpine": "docker run -v $(pwd):/var/pidusage pidusage:latest npm test",
      "coverage": "codecov",
      "bench": "ava -m \"*benchmark*\""
    },
    "dependencies": {
      "safe-buffer": "^5.2.1"
    },
    "devDependencies": {
      "ava": "^3.10.1",
      "codecov": "^3.7.0",
      "mockdate": "^2.0.5",
      "mockery": "^2.1.0",
      "nyc": "^15.1.0",
      "pify": "^3.0.0",
      "standard": "^14.3.4",
      "string-to-stream": "^1.1.1",
      "through": "^2.3.8",
      "time-span": "^2.0.0"
    },
    "keywords": [
      "pid",
      "usage",
      "ps",
      "cpu",
      "memory",
      "proc"
    ],
    "ava": {
      "verbose": true
    },
    "nyc": {
      "reporter": [
        "lcovonly",
        "text"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-pidusage-2.0.21-integrity/node_modules/pidusage/package.json",
    "readmeFilename": "README.md",
    "readme": "# pidusage\n\n[![Mac/Linux Build Status](https://img.shields.io/travis/soyuka/pidusage/master.svg?label=MacOS%20%26%20Linux)](https://travis-ci.org/soyuka/pidusage)\n[![Windows Build status](https://img.shields.io/appveyor/ci/soyuka/pidusage/master.svg?label=Windows)](https://ci.appveyor.com/project/soyuka/pidusage)\n[![Code coverage](https://img.shields.io/codecov/c/github/soyuka/pidusage/master.svg)](https://codecov.io/gh/soyuka/pidusage)\n[![npm version](https://img.shields.io/npm/v/pidusage.svg)](https://www.npmjs.com/package/pidusage)\n[![license](https://img.shields.io/github/license/soyuka/pidusage.svg)](https://github.com/soyuka/pidusage/tree/master/license)\n\nCross-platform process cpu % and memory usage of a PID.\n\n## Synopsis\n\nIdeas from https://github.com/arunoda/node-usage but with no C-bindings.\n\nPlease note that if you need to check a Node.JS script process cpu and memory usage, you can use [`process.cpuUsage`][node:cpuUsage] and [`process.memoryUsage`][node:memUsage] since node v6.1.0. This script remain useful when you have no control over the remote script, or if the process is not a Node.JS process.\n\n\n## Usage\n\n```js\nvar pidusage = require('pidusage')\n\npidusage(process.pid, function (err, stats) {\n  console.log(stats)\n  // => {\n  //   cpu: 10.0,            // percentage (from 0 to 100*vcore)\n  //   memory: 357306368,    // bytes\n  //   ppid: 312,            // PPID\n  //   pid: 727,             // PID\n  //   ctime: 867000,        // ms user + system time\n  //   elapsed: 6650000,     // ms since the start of the process\n  //   timestamp: 864000000  // ms since epoch\n  // }\n  cb()\n})\n\n// It supports also multiple pids\npidusage([727, 1234], function (err, stats) {\n  console.log(stats)\n  // => {\n  //   727: {\n  //     cpu: 10.0,            // percentage (from 0 to 100*vcore)\n  //     memory: 357306368,    // bytes\n  //     ppid: 312,            // PPID\n  //     pid: 727,             // PID\n  //     ctime: 867000,        // ms user + system time\n  //     elapsed: 6650000,     // ms since the start of the process\n  //     timestamp: 864000000  // ms since epoch\n  //   },\n  //   1234: {\n  //     cpu: 0.1,             // percentage (from 0 to 100*vcore)\n  //     memory: 3846144,      // bytes\n  //     ppid: 727,            // PPID\n  //     pid: 1234,            // PID\n  //     ctime: 0,             // ms user + system time\n  //     elapsed: 20000,       // ms since the start of the process\n  //     timestamp: 864000000  // ms since epoch\n  //   }\n  // }\n})\n\n// If no callback is given it returns a promise instead\nconst stats = await pidusage(process.pid)\nconsole.log(stats)\n// => {\n//   cpu: 10.0,            // percentage (from 0 to 100*vcore)\n//   memory: 357306368,    // bytes\n//   ppid: 312,            // PPID\n//   pid: 727,             // PID\n//   ctime: 867000,        // ms user + system time\n//   elapsed: 6650000,     // ms since the start of the process\n//   timestamp: 864000000  // ms since epoch\n// }\n\n// Avoid using setInterval as they could overlap with asynchronous processing\nfunction compute(cb) {\n  pidusage(process.pid, function (err, stats) {\n    console.log(stats)\n    // => {\n    //   cpu: 10.0,            // percentage (from 0 to 100*vcore)\n    //   memory: 357306368,    // bytes\n    //   ppid: 312,            // PPID\n    //   pid: 727,             // PID\n    //   ctime: 867000,        // ms user + system time\n    //   elapsed: 6650000,     // ms since the start of the process\n    //   timestamp: 864000000  // ms since epoch\n    // }\n    cb()\n  })\n}\n\nfunction interval(time) {\n  setTimeout(function() {\n    compute(function() {\n      interval(time)\n    })\n  }, time)\n}\n\n// Compute statistics every second:\ninterval(1000)\n\n// Above example using async/await\nconst compute = async () => {\n  const stats = await pidusage(process.pid)\n  // do something\n}\n\n// Compute statistics every second:\nconst interval = async (time) => {\n  setTimeout(async () => {\n    await compute()\n    interval(time)\n  }, time)\n}\n\ninterval(1000)\n```\n\n## Compatibility\n\n| Property | Linux | FreeBSD | NetBSD | SunOS | macOS | Win | AIX | Alpine\n| ---         | --- | --- | --- | --- | --- | --- | --- | --- |\n| `cpu`       | ✅ | ❓ | ❓ | ❓ | ✅ | ℹ️ | ❓ | ✅ |\n| `memory`    | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n| `pid`       | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n| `ctime`     | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n| `elapsed`   | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n| `timestamp` | ✅ | ❓ | ❓ | ❓ | ✅ | ✅ | ❓ | ✅ |\n\n✅ = Working\nℹ️ = Not Accurate\n❓ = Should Work\n❌ = Not Working\n\nPlease if your platform is not supported or if you have reported wrong readings\n[file an issue][new issue].\n\nBy default, pidusage will use `procfile` parsing on most unix systems. If you want to use `ps` instead use the `usePs` option:\n\n```\npidusage(pid, {usePs: true})\n```\n\n## API\n\n<a name=\"pidusage\"></a>\n\n### pidusage(pids, [options = {}], [callback]) ⇒ <code>[Promise.&lt;Object&gt;]</code>\nGet pid informations.\n\n**Kind**: global function\n**Returns**: <code>Promise.&lt;Object&gt;</code> - Only when the callback is not provided.\n**Access**: public\n\n| Param | Type | Description |\n| --- | --- | --- |\n| pids | <code>Number</code> \\| <code>Array.&lt;Number&gt;</code> \\| <code>String</code> \\| <code>Array.&lt;String&gt;</code> | A pid or a list of pids. |\n| [callback] | <code>function</code> | Called when the statistics are ready. If not provided a promise is returned instead. |\n\n### pidusage.clear()\n\nIf needed this function can be used to delete all in-memory metrics and clear the event loop. This is not necessary before exiting as the interval we're registring does not hold up the event loop.\n\n## Related\n- [pidusage-tree][gh:pidusage-tree] -\nCompute a pidusage tree\n\n## Authors\n- **Antoine Bluchet** - [soyuka][github:soyuka]\n- **Simone Primarosa** - [simonepri][github:simonepri]\n\nSee also the list of [contributors][contributors] who participated in this project.\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE][license] file for details.\n\n<!-- Links -->\n[new issue]: https://github.com/soyuka/pidusage/issues/new\n[license]: https://github.com/soyuka/pidusage/tree/master/LICENSE\n[contributors]: https://github.com/soyuka/pidusage/contributors\n\n[github:soyuka]: https://github.com/soyuka\n[github:simonepri]: https://github.com/simonepri\n\n[gh:pidusage-tree]: https://github.com/soyuka/pidusage-tree\n\n[node:cpuUsage]: https://nodejs.org/api/process.html#process_process_cpuusage_previousvalue\n[node:memUsage]: https://nodejs.org/api/process.html#process_process_memoryusage\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 soyuka\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/pidusage/-/pidusage-2.0.21.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/pidusage/-/pidusage-2.0.21.tgz",
    "hash": "",
    "integrity": "sha512-cv3xAQos+pugVX+BfXpHsbyz/dLzX+lr44zNMsYiGxUw+kV5sgQCIcLd1z+0vq+KyC7dJ+/ts2PsfgWfSC3WXA==",
    "registry": "npm",
    "packageName": "pidusage",
    "cacheIntegrity": "sha512-cv3xAQos+pugVX+BfXpHsbyz/dLzX+lr44zNMsYiGxUw+kV5sgQCIcLd1z+0vq+KyC7dJ+/ts2PsfgWfSC3WXA== sha1-cGiWez2VK66nPldmjJi56qh2iU4="
  },
  "registry": "npm",
  "hash": "72fdf1010a2cfa9ba0557f817d7a47b1bcb3fdd2f35fe96be38ccd32c6221b1530fa4579b2040221c2ddd73fb4beaf8ac82edd27efedb363ec7e059f482dd65c"
}