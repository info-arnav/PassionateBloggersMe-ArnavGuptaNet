{
  "manifest": {
    "name": "google-auth-library",
    "version": "3.1.2",
    "author": {
      "name": "Google Inc."
    },
    "description": "Google APIs Authentication Client Library for Node.js",
    "engines": {
      "node": ">=6"
    },
    "main": "./build/src/index.js",
    "types": "./build/src/index.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/googleapis/google-auth-library-nodejs.git"
    },
    "keywords": [
      "google",
      "api",
      "google apis",
      "client",
      "client library"
    ],
    "dependencies": {
      "base64-js": "^1.3.0",
      "fast-text-encoding": "^1.0.0",
      "gaxios": "^1.2.1",
      "gcp-metadata": "^1.0.0",
      "gtoken": "^2.3.2",
      "https-proxy-agent": "^2.2.1",
      "jws": "^3.1.5",
      "lru-cache": "^5.0.0",
      "semver": "^5.5.0"
    },
    "devDependencies": {
      "@compodoc/compodoc": "^1.1.7",
      "@types/base64-js": "^1.2.5",
      "@types/chai": "^4.1.7",
      "@types/execa": "^0.9.0",
      "@types/jws": "^3.1.0",
      "@types/lru-cache": "^5.0.0",
      "@types/mocha": "^5.2.1",
      "@types/mv": "^2.1.0",
      "@types/ncp": "^2.0.1",
      "@types/nock": "^9.1.3",
      "@types/node": "^10.5.1",
      "@types/semver": "^5.5.0",
      "@types/sinon": "^7.0.0",
      "@types/tmp": "^0.0.34",
      "assert-rejects": "^1.0.0",
      "chai": "^4.2.0",
      "codecov": "^3.0.2",
      "eslint": "^5.10.0",
      "eslint-config-prettier": "^4.0.0",
      "eslint-plugin-node": "^8.0.0",
      "eslint-plugin-prettier": "^3.0.0",
      "execa": "^1.0.0",
      "gh-pages": "^2.0.1",
      "gts": "^0.9.0",
      "intelli-espower-loader": "^1.0.1",
      "is-docker": "^1.1.0",
      "js-green-licenses": "^0.5.0",
      "karma": "^4.0.0",
      "karma-chrome-launcher": "^2.2.0",
      "karma-coverage": "^1.1.2",
      "karma-firefox-launcher": "^1.1.0",
      "karma-mocha": "^1.3.0",
      "karma-remap-coverage": "^0.1.5",
      "karma-sourcemap-loader": "^0.3.7",
      "karma-webpack": "^3.0.0",
      "keypair": "^1.0.1",
      "linkinator": "^1.1.2",
      "mocha": "^6.0.0",
      "mv": "^2.1.1",
      "ncp": "^2.0.0",
      "nock": "^10.0.0",
      "null-loader": "^0.1.1",
      "nyc": "^13.3.0",
      "prettier": "^1.13.4",
      "puppeteer": "^1.11.0",
      "sinon": "^7.0.0",
      "source-map-support": "^0.5.6",
      "tmp": "^0.0.33",
      "ts-loader": "^5.0.0",
      "typescript": "~3.3.0",
      "webpack": "^4.20.2",
      "webpack-cli": "^3.1.1"
    },
    "files": [
      "build/src",
      "!build/src/**/*.map"
    ],
    "scripts": {
      "test": "nyc mocha build/test",
      "clean": "gts clean",
      "prepare": "npm run compile",
      "lint": "gts check && eslint '**/*.js' && jsgl --local .",
      "compile": "tsc -p .",
      "fix": "gts fix && eslint --fix '**/*.js'",
      "pretest": "npm run compile",
      "license-check": "jsgl --local .",
      "docs": "compodoc src/ && touch docs/.nojekyll",
      "publish-docs": "gh-pages -d docs --remote upstream && git push upstream gh-pages",
      "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
      "system-test": "mocha build/system-test --timeout 60000",
      "presystem-test": "npm run compile",
      "webpack": "webpack",
      "browser-test": "karma start",
      "docs-test": "linkinator docs -r --skip www.googleapis.com",
      "predocs-test": "npm run docs"
    },
    "license": "Apache-2.0",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-google-auth-library-3.1.2-integrity/node_modules/google-auth-library/package.json",
    "readmeFilename": "README.md",
    "readme": "<img src=\"https://avatars0.githubusercontent.com/u/1342004?v=3&s=96\" alt=\"Google Inc. logo\" title=\"Google\" align=\"right\" height=\"96\" width=\"96\"/>\n\n# Google Auth Library\n\n[![npm version][npmimg]][npm]\n[![codecov][codecov-image]][codecov-url]\n[![Dependencies][david-dm-img]][david-dm]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n\nThis is Google's officially supported [node.js][node] client library for using OAuth 2.0 authorization and authentication with Google APIs.\n\n## Installation\nThis library is distributed on `npm`. To add it as a dependency, run the following command:\n\n``` sh\n$ npm install google-auth-library\n```\n\n## Ways to authenticate\nThis library provides a variety of ways to authenticate to your Google services.\n- [Application Default Credentials](#choosing-the-correct-credential-type-automatically) - Use Application Default Credentials when you use a single identity for all users in your application. Especially useful for applications running on Google Cloud.\n- [OAuth 2](#oauth2) - Use OAuth2 when you need to perform actions on behalf of the end user.\n- [JSON Web Tokens](#json-web-tokens) - Use JWT when you are using a single identity for all users. Especially useful for server->server or server->API communication.\n- [Google Compute](#compute) - Directly use a service account on Google Cloud Platform. Useful for server->server or server->API communication.\n\n## Application Default Credentials\nThis library provides an implementation of [Application Default Credentials][] for Node.js. The [Application Default Credentials][] provide a simple way to get authorization credentials for use in calling Google APIs.\n\nThey are best suited for cases when the call needs to have the same identity and authorization level for the application independent of the user. This is the recommended approach to authorize calls to Cloud APIs, particularly when you're building an application that uses Google Cloud Platform.\n\n#### Download your Service Account Credentials JSON file\n\nTo use Application Default Credentials, You first need to download a set of JSON credentials for your project. Go to **APIs & Auth** > **Credentials** in the [Google Developers Console][devconsole] and select **Service account** from the **Add credentials** dropdown.\n\n> This file is your *only copy* of these credentials. It should never be\n> committed with your source code, and should be stored securely.\n\nOnce downloaded, store the path to this file in the `GOOGLE_APPLICATION_CREDENTIALS` environment variable.\n\n#### Enable the API you want to use\n\nBefore making your API call, you must be sure the API you're calling has been enabled. Go to **APIs & Auth** > **APIs** in the [Google Developers Console][devconsole] and enable the APIs you'd like to call. For the example below, you must enable the `DNS API`.\n\n\n#### Choosing the correct credential type automatically\n\nRather than manually creating an OAuth2 client, JWT client, or Compute client, the auth library can create the correct credential type for you, depending upon the environment your code is running under.\n\nFor example, a JWT auth client will be created when your code is running on your local developer machine, and a Compute client will be created when the same code is running on Google Cloud Platform. If you need a specific set of scopes, you can pass those in the form of a string or an array into the `auth.getClient` method.\n\nThe code below shows how to retrieve a default credential type, depending upon the runtime environment.\n\n```js\nconst {auth} = require('google-auth-library');\n\n/**\n * Instead of specifying the type of client you'd like to use (JWT, OAuth2, etc)\n * this library will automatically choose the right client based on the environment.\n */\nasync function main() {\n  const client = await auth.getClient({\n    scopes: 'https://www.googleapis.com/auth/cloud-platform'\n  });\n  const projectId = await auth.getProjectId();\n  const url = `https://www.googleapis.com/dns/v1/projects/${projectId}`;\n  const res = await client.request({ url });\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\n## OAuth2\n\nThis library comes with an [OAuth2][oauth] client that allows you to retrieve an access token and refreshes the token and retry the request seamlessly if you also provide an `expiry_date` and the token is expired. The basics of Google's OAuth2 implementation is explained on [Google Authorization and Authentication documentation][authdocs].\n\nIn the following examples, you may need a `CLIENT_ID`, `CLIENT_SECRET` and `REDIRECT_URL`. You can find these pieces of information by going to the [Developer Console][devconsole], clicking your project > APIs & auth > credentials.\n\nFor more information about OAuth2 and how it works, [see here][oauth].\n\n#### A complete OAuth2 example\n\nLet's take a look at a complete example.\n\n``` js\nconst {OAuth2Client} = require('google-auth-library');\nconst http = require('http');\nconst url = require('url');\nconst opn = require('opn');\nconst destroyer = require('server-destroy');\n\n// Download your OAuth2 configuration from the Google\nconst keys = require('./oauth2.keys.json');\n\n/**\n * Start by acquiring a pre-authenticated oAuth2 client.\n */\nasync function main() {\n  const oAuth2Client = await getAuthenticatedClient();\n  // Make a simple request to the People API using our pre-authenticated client. The `request()` method\n  // takes an GaxiosOptions object.  Visit https://github.com/JustinBeckwith/gaxios.\n  const url = 'https://people.googleapis.com/v1/people/me?personFields=names';\n  const res = await oAuth2Client.request({url});\n  console.log(res.data);\n\n  // After acquiring an access_token, you may want to check on the audience, expiration,\n  // or original scopes requested.  You can do that with the `getTokenInfo` method.\n  const tokenInfo = await oAuth2Client.getTokenInfo(\n    oAuth2Client.credentials.access_token\n  );\n  console.log(tokenInfo);\n}\n\n/**\n * Create a new OAuth2Client, and go through the OAuth2 content\n * workflow.  Return the full client to the callback.\n */\nfunction getAuthenticatedClient() {\n  return new Promise((resolve, reject) => {\n    // create an oAuth client to authorize the API call.  Secrets are kept in a `keys.json` file,\n    // which should be downloaded from the Google Developers Console.\n    const oAuth2Client = new OAuth2Client(\n      keys.web.client_id,\n      keys.web.client_secret,\n      keys.web.redirect_uris[0]\n    );\n\n    // Generate the url that will be used for the consent dialog.\n    const authorizeUrl = oAuth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: 'https://www.googleapis.com/auth/userinfo.profile',\n    });\n\n    // Open an http server to accept the oauth callback. In this simple example, the\n    // only request to our webserver is to /oauth2callback?code=<code>\n    const server = http\n      .createServer(async (req, res) => {\n        try {\n          if (req.url.indexOf('/oauth2callback') > -1) {\n            // acquire the code from the querystring, and close the web server.\n            const qs = new url.URL(req.url, 'http://localhost:3000')\n              .searchParams;\n            const code = qs.get('code');\n            console.log(`Code is ${code}`);\n            res.end('Authentication successful! Please return to the console.');\n            server.destroy();\n\n            // Now that we have the code, use that to acquire tokens.\n            const r = await oAuth2Client.getToken(code);\n            // Make sure to set the credentials on the OAuth2 client.\n            oAuth2Client.setCredentials(r.tokens);\n            console.info('Tokens acquired.');\n            resolve(oAuth2Client);\n          }\n        } catch (e) {\n          reject(e);\n        }\n      })\n      .listen(3000, () => {\n        // open the browser to the authorize url to start the workflow\n        opn(authorizeUrl, {wait: false}).then(cp => cp.unref());\n      });\n    destroyer(server);\n  });\n}\n\nmain().catch(console.error);\n```\n\n#### Handling token events\nThis library will automatically obtain an `access_token`, and automatically refresh the `access_token` if a `refresh_token` is present.  The `refresh_token` is only returned on the [first authorization](https://github.com/googleapis/google-api-nodejs-client/issues/750#issuecomment-304521450), so if you want to make sure you store it safely. An easy way to make sure you always store the most recent tokens is to use the `tokens` event:\n\n```js\nconst client = await auth.getClient();\n\nclient.on('tokens', (tokens) => {\n  if (tokens.refresh_token) {\n    // store the refresh_token in my database!\n    console.log(tokens.refresh_token);\n  }\n  console.log(tokens.access_token);\n});\n\nconst url = `https://www.googleapis.com/dns/v1/projects/${projectId}`;\nconst res = await client.request({ url });\n// The `tokens` event would now be raised if this was the first request\n```\n\n#### Retrieve access token\nWith the code returned, you can ask for an access token as shown below:\n\n``` js\nconst tokens = await oauth2Client.getToken(code);\n// Now tokens contains an access_token and an optional refresh_token. Save them.\noauth2Client.setCredentials(tokens);\n```\n\n#### Obtaining a new Refresh Token\nIf you need to obtain a new `refresh_token`, ensure the call to `generateAuthUrl` sets the `access_type` to `offline`.  The refresh token will only be returned for the first authorization by the user.  To force consent, set the `prompt` property to `consent`:\n\n```js\n// Generate the url that will be used for the consent dialog.\nconst authorizeUrl = oAuth2Client.generateAuthUrl({\n  // To get a refresh token, you MUST set access_type to `offline`.\n  access_type: 'offline',\n  // set the appropriate scopes\n  scope: 'https://www.googleapis.com/auth/userinfo.profile',\n  // A refresh token is only returned the first time the user\n  // consents to providing access.  For illustration purposes,\n  // setting the prompt to 'consent' will force this consent\n  // every time, forcing a refresh_token to be returned.\n  prompt: 'consent'\n});\n```\n\n#### Checking `access_token` information\nAfter obtaining and storing an `access_token`, at a later time you may want to go check the expiration date,\noriginal scopes, or audience for the token.  To get the token info, you can use the `getTokenInfo` method:\n\n```js\n// after acquiring an oAuth2Client...\nconst tokenInfo = await oAuth2Client.getTokenInfo('my-access-token');\n\n// take a look at the scopes originally provisioned for the access token\nconsole.log(tokenInfo.scopes);\n```\n\nThis method will throw if the token is invalid.\n\n#### OAuth2 with Installed Apps (Electron)\nIf you're authenticating with OAuth2 from an installed application (like Electron), you may not want to embed your `client_secret` inside of the application sources. To work around this restriction, you can choose the `iOS` application type when creating your OAuth2 credentials in the [Google Developers console][devconsole]:\n\n![application type][apptype]\n\nIf using the `iOS` type, when creating the OAuth2 client you won't need to pass a `client_secret` into the constructor:\n```js\nconst oAuth2Client = new OAuth2Client({\n  clientId: <your_client_id>,\n  redirectUri: <your_redirect_uri>\n});\n```\n\n## JSON Web Tokens\nThe Google Developers Console provides a `.json` file that you can use to configure a JWT auth client and authenticate your requests, for example when using a service account.\n\n``` js\nconst {JWT} = require('google-auth-library');\nconst keys = require('./jwt.keys.json');\n\nasync function main() {\n  const client = new JWT(\n    keys.client_email,\n    null,\n    keys.private_key,\n    ['https://www.googleapis.com/auth/cloud-platform'],\n  );\n  const url = `https://www.googleapis.com/dns/v1/projects/${keys.project_id}`;\n  const res = await client.request({url});\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\nThe parameters for the JWT auth client including how to use it with a `.pem` file are explained in [samples/jwt.js](https://github.com/googleapis/google-auth-library-nodejs/blob/master/samples/jwt.js).\n\n#### Loading credentials from environment variables\nInstead of loading credentials from a key file, you can also provide them using an environment variable and the `GoogleAuth.fromJSON()` method.  This is particularly convenient for systems that deploy directly from source control (Heroku, App Engine, etc).\n\nStart by exporting your credentials:\n\n```\n$ export CREDS='{\n  \"type\": \"service_account\",\n  \"project_id\": \"your-project-id\",\n  \"private_key_id\": \"your-private-key-id\",\n  \"private_key\": \"your-private-key\",\n  \"client_email\": \"your-client-email\",\n  \"client_id\": \"your-client-id\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"your-cert-url\"\n}'\n```\nNow you can create a new client from the credentials:\n\n```js\nconst {auth} = require('google-auth-library');\n\n// load the environment variable with our keys\nconst keysEnvVar = process.env['CREDS'];\nif (!keysEnvVar) {\n  throw new Error('The $CREDS environment variable was not found!');\n}\nconst keys = JSON.parse(keysEnvVar);\n\nasync function main() {\n  // load the JWT or UserRefreshClient from the keys\n  const client = auth.fromJSON(keys);\n  client.scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n  const url = `https://www.googleapis.com/dns/v1/projects/${keys.project_id}`;\n  const res = await client.request({url});\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\n#### Using a Proxy\nYou can set the `HTTPS_PROXY` or `https_proxy` environment variables to proxy HTTPS requests. When `HTTPS_PROXY` or `https_proxy` are set, they will be used to proxy SSL requests that do not have an explicit proxy configuration option present.\n\n## Compute\nIf your application is running on Google Cloud Platform, you can authenticate using the default service account or by specifying a specific service account.\n\n**Note**: In most cases, you will want to use [Application Default Credentials](#choosing-the-correct-credential-type-automatically).  Direct use of the `Compute` class is for very specific scenarios.\n\n``` js\nconst {auth, Compute} = require('google-auth-library');\n\nasync function main() {\n  const client = new Compute({\n    // Specifying the service account email is optional.\n    serviceAccountEmail: 'my-service-account@example.com'\n  });\n  const projectId = await auth.getProjectId();\n  const url = `https://www.googleapis.com/dns/v1/projects/${project_id}`;\n  const res = await client.request({url});\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\n## Questions/problems?\n\n* Ask your development related questions on [Stack Overflow][stackoverflow].\n* If you've found an bug/issue, please [file it on GitHub][bugs].\n\n## Contributing\n\nSee [CONTRIBUTING][contributing].\n\n## License\n\nThis library is licensed under Apache 2.0. Full license text is available in [LICENSE][copying].\n\n[Application Default Credentials]: https://cloud.google.com/docs/authentication/getting-started\n[apptype]: https://user-images.githubusercontent.com/534619/36553844-3f9a863c-17b2-11e8-904a-29f6cd5f807a.png\n[authdocs]: https://developers.google.com/accounts/docs/OAuth2Login\n[bugs]: https://github.com/googleapis/google-auth-library-nodejs/issues\n[codecov-image]: https://codecov.io/gh/googleapis/google-auth-library-nodejs/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/googleapis/google-auth-library-nodejs\n[contributing]: https://github.com/googleapis/google-auth-library-nodejs/blob/master/CONTRIBUTING.md\n[copying]: https://github.com/googleapis/google-auth-library-nodejs/tree/master/LICENSE\n[david-dm-img]: https://david-dm.org/googleapis/google-auth-library-nodejs/status.svg\n[david-dm]: https://david-dm.org/googleapis/google-auth-library-nodejs\n[node]: http://nodejs.org/\n[npmimg]: https://img.shields.io/npm/v/google-auth-library.svg\n[npm]: https://www.npmjs.org/package/google-auth-library\n[oauth]: https://developers.google.com/identity/protocols/OAuth2\n[snyk-image]: https://snyk.io/test/github/googleapis/google-auth-library-nodejs/badge.svg\n[snyk-url]: https://snyk.io/test/github/googleapis/google-auth-library-nodejs\n[stackoverflow]: http://stackoverflow.com/questions/tagged/google-auth-library-nodejs\n[devconsole]: https://console.developer.google.com\n",
    "licenseText": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/google-auth-library/-/google-auth-library-3.1.2.tgz",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/google-auth-library/-/google-auth-library-3.1.2.tgz",
    "hash": "",
    "integrity": "sha512-cDQMzTotwyWMrg5jRO7q0A4TL/3GWBgO7I7q5xGKNiiFf9SmGY/OJ1YsLMgI2MVHHsEGyrqYnbnmV1AE+Z6DnQ==",
    "registry": "npm",
    "packageName": "google-auth-library",
    "cacheIntegrity": "sha512-cDQMzTotwyWMrg5jRO7q0A4TL/3GWBgO7I7q5xGKNiiFf9SmGY/OJ1YsLMgI2MVHHsEGyrqYnbnmV1AE+Z6DnQ== sha1-/y+IzVzSEYpXvT1a08CTyIN/w1A="
  },
  "registry": "npm",
  "hash": "70340ccd3a2dc3258cae0e6344eeead00e132ffdc658180eec8eeae7118a3628857fd4a6198fce27562c2cc808d8c5471ec106caba989db9e6575004f99e839d"
}