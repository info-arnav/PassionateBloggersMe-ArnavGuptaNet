{
  "manifest": {
    "name": "pm2-multimeter",
    "version": "0.1.2",
    "description": "render multiple progress bars at once on the terminal with eventlimit maxed",
    "main": "index.js",
    "dependencies": {
      "charm": "~0.1.1"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Unitech/node-multimeter.git"
    },
    "keywords": [
      "progress",
      "bar",
      "status",
      "meter",
      "terminal",
      "console",
      "ansi"
    ],
    "author": {
      "name": "James Halliday",
      "email": "mail@substack.net",
      "url": "http://substack.net"
    },
    "license": "MIT",
    "engine": {
      "node": ">=0.4"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-pm2-multimeter-0.1.2-integrity/node_modules/pm2-multimeter/package.json",
    "readmeFilename": "README.markdown",
    "readme": "multimeter\n==========\n\nControl multiple ANSI progress bars on the terminal.\n\n![multibar example output](http://substack.net/images/screenshots/multibar.png)\n\n![multimeter](http://substack.net/images/multimeter.png)\n\nexample\n=======\n\n````javascript\nvar multimeter = require('multimeter');\nvar multi = multimeter(process);\n\nmulti.drop(function (bar) {\n    var iv = setInterval(function () {\n        var p = bar.percent();\n        bar.percent(p + 1);\n        \n        if (p >= 100) clearInterval(iv);\n    }, 25);\n});\n````\n\nmethods\n=======\n\nvar multimeter = require('multimeter');\n\nvar multi = multimeter(stream, ...)\n-----------------------------------\n\nCreate a new multimeter handle on the supplied stream/process objects, which\nwill be passed directly to [charm](https://github.com/substack/node-charm).\n\nIf you pass in a charm object that will be used instead of creating a new one.\n\nvar bar = multi(x, y, params)\n-----------------------------\n\nCreate a new progress bar at `(x,y)` with `params` which default to:\n\n* width : 10\n* before : '['\n* after : '] '\n* solid : { background : 'blue', foreground : 'white', text : '|' }\n* empty : { background : null, foreground : null, text : ' ' }\n\nIf `y` is negative or `'-0'` it will be treated as a relative coordinate.\n\nvar bar = multi.rel(x, y, params)\n---------------------------------\n\nCreate a new progress bar at an absolute `x` and relative `y` coordinate with\nrespect to the present `multi.offset`.\n\nmulti.drop(params, cb)\n----------------------\n\nCreate a new progress bar at the present cursor location. The `bar` object will\nbe passed to `cb(bar)` once the cursor location has been determined. \n\nmulti.on(...), multi.removeListener(...), multi.destroy(...), multi.write(...)\n------------------------------------------------------------------------------\n\nCall event emitter functions on the underlying `charm` object.\n\nmulti.offset\n------------\n\nThis getter/setter controls the positioning for relative progress bars.\n\nIncrement this value whenever you write a newline to the stream to prevent the\npending progress bars from drifting down from their original positions.\n\nbar.percent(p, msg=p + ' %')\n----------------------------\n\nUpdate the progress bar to `p` percent, a value between 0 and 100, inclusive.\n\nThe text to the right of the progress bar will be set to `msg`.\n\nbar.ratio(n, d, msg=n + ' / ' + d)\n----------------------------------\n\nUpdate the progress bar with a ratio, `n/d`.\n\nThe text to the right of the progress bar will be set to `msg`.\n\nattributes\n==========\n\nmulti.charm\n-----------\n\nThe [charm](https://github.com/substack/node-charm) object used internally to\ndraw the progress bars.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n    npm install multimeter\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/pm2-multimeter/-/pm2-multimeter-0.1.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/pm2-multimeter/-/pm2-multimeter-0.1.2.tgz",
    "hash": "",
    "integrity": "sha1-Gh5VFT1BoFU0zqI8/oYKuqDrSs4=",
    "registry": "npm",
    "packageName": "pm2-multimeter",
    "cacheIntegrity": "sha512-S+wT6XfyKfd7SJIBqRgOctGxaBzUOmVQzTAS+cg04TsEUObJVreha7lvCfX8zzGVr871XwCSnHUU7DQQ5xEsfA== sha1-Gh5VFT1BoFU0zqI8/oYKuqDrSs4="
  },
  "registry": "npm",
  "hash": "4bec13e977f229f77b489201a9180e72d1b1681cd43a6550cd3012f9c834e13b0450e6c956b7a16bb96f09f5fccf3195afcef55f00929c7514ec3410e7112c7c"
}