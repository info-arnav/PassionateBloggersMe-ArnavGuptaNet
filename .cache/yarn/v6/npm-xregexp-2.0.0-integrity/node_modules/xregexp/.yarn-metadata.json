{
  "manifest": {
    "name": "xregexp",
    "version": "2.0.0",
    "homepage": "http://xregexp.com/",
    "author": {
      "name": "Steven Levithan",
      "email": "steves_list@hotmail.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/slevithan/XRegExp.git"
    },
    "description": "Extended JavaScript regular expressions",
    "keywords": [
      "regex",
      "regexp"
    ],
    "main": "./xregexp-all.js",
    "scripts": {
      "test": "node tests/node-qunit.js"
    },
    "devDependencies": {
      "qunit": ">= 0.2.x"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-xregexp-2.0.0-integrity/node_modules/xregexp/package.json",
    "readmeFilename": "README.md",
    "readme": "﻿[XRegExp](http://xregexp.com/)\n==============================\n\nXRegExp provides augmented, extensible, cross-browser JavaScript regular expressions. You get new syntax and flags beyond what browsers support natively, along with a collection of utils to make your client-side grepping and parsing easier. XRegExp also frees you from worrying about pesky inconsistencies in cross-browser regex handling and the dubious `lastIndex` property.\n\nXRegExp supports all native ES5 regular expression syntax. It's about 3.5 KB when minified and gzipped. It works with Internet Explorer 5.5+, Firefox 1.5+, Chrome, Safari 3+, and Opera 9.5+.\n\n\n## Performance\n\nXRegExp regular expressions compile to native RegExp objects, thus there is no performance difference when using XRegExp objects with native methods. There is a small performance cost when *compiling* XRegExps. If you want, however, you can use `XRegExp.cache` to avoid ever incurring the compilation cost for a given pattern more than once. Doing so can even lead to XRegExp being faster than native regexes in synthetic tests that repeatedly compile the same regex.\n\n\n## Usage examples\n\n~~~ js\n// Using named capture and flag x (free-spacing and line comments)\nvar date = XRegExp('(?<year>  [0-9]{4}) -?  # year  \\n\\\n                    (?<month> [0-9]{2}) -?  # month \\n\\\n                    (?<day>   [0-9]{2})     # day   ', 'x');\n\n// XRegExp.exec gives you named backreferences on the match result\nvar match = XRegExp.exec('2012-02-22', date);\nmatch.day; // -> '22'\n\n// It also includes optional pos and sticky arguments\nvar pos = 3, result = [];\nwhile (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d+)>/, pos, 'sticky')) {\n    result.push(match[1]);\n    pos = match.index + match[0].length;\n} // result -> ['2', '3', '4']\n\n// XRegExp.replace allows named backreferences in replacements\nXRegExp.replace('2012-02-22', date, '${month}/${day}/${year}'); // -> '02/22/2012'\nXRegExp.replace('2012-02-22', date, function (match) {\n    return match.month + '/' + match.day + '/' + match.year;\n}); // -> '02/22/2012'\n\n// In fact, all XRegExps are RegExps and work perfectly with native methods\ndate.test('2012-02-22'); // -> true\n\n// The *only* caveat is that named captures must be referred to using numbered backreferences\n'2012-02-22'.replace(date, '$2/$3/$1'); // -> '02/22/2012'\n\n// If you want, you can extend native methods so you don't have to worry about this\n// Doing so also fixes numerous browser bugs in the native methods\nXRegExp.install('natives');\n'2012-02-22'.replace(date, '${month}/${day}/${year}'); // -> '02/22/2012'\n'2012-02-22'.replace(date, function (match) {\n    return match.month + '/' + match.day + '/' + match.year;\n}); // -> '02/22/2012'\ndate.exec('2012-02-22').day; // -> '22'\n\n// Extract every other digit from a string using XRegExp.forEach\nXRegExp.forEach('1a2345', /\\d/, function (match, i) {\n    if (i % 2) this.push(+match[0]);\n}, []); // -> [2, 4]\n\n// Get numbers within <b> tags using XRegExp.matchChain\nXRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n    XRegExp('(?is)<b>.*?</b>'),\n    /\\d+/\n]); // -> ['2', '4', '56']\n\n// You can also pass forward and return specific backreferences\nvar html = '<a href=\"http://xregexp.com/\">XRegExp</a>\\\n            <a href=\"http://www.google.com/\">Google</a>';\nXRegExp.matchChain(html, [\n    {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n    {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n]); // -> ['xregexp.com', 'www.google.com']\n\n// XRegExp.union safely merges strings and regexes into a single pattern\nXRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\n// -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\n~~~\n\nThese examples should give you the flavor of what's possible, but XRegExp has more syntax, flags, utils, options, and browser fixes that aren't shown here. You can even augment XRegExp's regular expression syntax with addons (see below) or write your own. See [xregexp.com](http://xregexp.com/) for more details.\n\n\n## Addons\n\nIn browsers, you can either load addons individually, or bundle all addons together with XRegExp by loading `xregexp-all.js`. XRegExp's [npm](http://npmjs.org/) package uses `xregexp-all.js`, which means that the addons are always available when XRegExp is installed on the server using npm.\n\n\n### XRegExp Unicode Base\n\nIn browsers, first include the Unicode Base script:\n\n~~~ html\n<script src=\"xregexp.js\"></script>\n<script src=\"addons/unicode/unicode-base.js\"></script>\n~~~\n\nThen you can do this:\n\n~~~ js\nvar unicodeWord = XRegExp('^\\\\p{L}+$');\nunicodeWord.test('Русский'); // -> true\nunicodeWord.test('日本語'); // -> true\nunicodeWord.test('العربية'); // -> true\n~~~\n\nThe base script adds `\\p{Letter}` and its alias `\\p{L}`, but other Unicode categories, scripts, blocks, and properties require addon packages. Try these next examples after additionally including `unicode-scripts.js`:\n\n~~~ js\nXRegExp('^\\\\p{Hiragana}+$').test('ひらがな'); // -> true\nXRegExp('^[\\\\p{Latin}\\\\p{Common}]+$').test('Über Café.'); // -> true\n~~~\n\nXRegExp uses the Unicode 6.1 Basic Multilingual Plane.\n\n\n### XRegExp.build\n\nIn browsers, first include the script:\n\n~~~ html\n<script src=\"xregexp.js\"></script>\n<script src=\"addons/build.js\"></script>\n~~~\n\nYou can then build regular expressions using named subpatterns, for readability and pattern reuse:\n\n~~~ js\nvar time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\n    hours: XRegExp.build('{{h12}} : | {{h24}}', {\n        h12: /1[0-2]|0?[1-9]/,\n        h24: /2[0-3]|[01][0-9]/\n    }, 'x'),\n    minutes: /^[0-5][0-9]$/\n});\n\ntime.test('10:59'); // -> true\nXRegExp.exec('10:59', time).minutes; // -> '59'\n~~~\n\nNamed subpatterns can be provided as strings or regex objects. A leading `^` and trailing unescaped `$` are stripped from subpatterns if both are present, which allows embedding independently useful anchored patterns. `{{…}}` tokens can be quantified as a single unit. Backreferences in the outer pattern and provided subpatterns are automatically renumbered to work correctly within the larger combined pattern. The syntax `({{name}})` works as shorthand for named capture via `(?<name>{{name}})`. Named subpatterns cannot be embedded within character classes.\n\nSee also: *[Creating Grammatical Regexes Using XRegExp.build](http://blog.stevenlevithan.com/archives/grammatical-patterns-xregexp-build)*.\n\n\n### XRegExp.matchRecursive\n\nIn browsers, first include the script:\n\n~~~ html\n<script src=\"xregexp.js\"></script>\n<script src=\"addons/matchrecursive.js\"></script>\n~~~\n\nYou can then match recursive constructs using XRegExp pattern strings as left and right delimiters:\n\n~~~ js\nvar str = '(t((e))s)t()(ing)';\nXRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\n// -> ['t((e))s', '', 'ing']\n\n// Extended information mode with valueNames\nstr = 'Here is <div> <div>an</div></div> example';\nXRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\n    valueNames: ['between', 'left', 'match', 'right']\n});\n/* -> [\n{name: 'between', value: 'Here is ',       start: 0,  end: 8},\n{name: 'left',    value: '<div>',          start: 8,  end: 13},\n{name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\n{name: 'right',   value: '</div>',         start: 27, end: 33},\n{name: 'between', value: ' example',       start: 33, end: 41}\n] */\n\n// Omitting unneeded parts with null valueNames, and using escapeChar\nstr = '...{1}\\\\{{function(x,y){return y+x;}}';\nXRegExp.matchRecursive(str, '{', '}', 'g', {\n    valueNames: ['literal', null, 'value', null],\n    escapeChar: '\\\\'\n});\n/* -> [\n{name: 'literal', value: '...', start: 0, end: 3},\n{name: 'value',   value: '1',   start: 4, end: 5},\n{name: 'literal', value: '\\\\{', start: 6, end: 8},\n{name: 'value',   value: 'function(x,y){return y+x;}', start: 9, end: 35}\n] */\n\n// Sticky mode via flag y\nstr = '<1><<<2>>><3>4<5>';\nXRegExp.matchRecursive(str, '<', '>', 'gy');\n// -> ['1', '<<2>>', '3']\n~~~\n\n`XRegExp.matchRecursive` throws an error if it sees an unbalanced delimiter in the target string.\n\n\n### XRegExp Prototype Methods\n\nIn browsers, first include the script:\n\n~~~ html\n<script src=\"xregexp.js\"></script>\n<script src=\"addons/prototypes.js\"></script>\n~~~\n\nNew XRegExp regexes then gain a collection of useful methods: `apply`, `call`, `forEach`, `globalize`, `xexec`, and `xtest`.\n\n~~~ js\n// To demonstrate the call method, let's first create the function we'll be using...\nfunction filter(array, fn) {\n    var res = [];\n    array.forEach(function (el) {if (fn.call(null, el)) res.push(el);});\n    return res;\n}\n// Now we can filter arrays using functions and regexes\nfilter(['a', 'ba', 'ab', 'b'], XRegExp('^a')); // -> ['a', 'ab']\n~~~\n\nNative `RegExp` objects copied by `XRegExp` are augmented with any `XRegExp.prototype` methods. The following lines therefore work equivalently:\n\n~~~ js\nXRegExp('[a-z]', 'ig').xexec('abc');\nXRegExp(/[a-z]/ig).xexec('abc');\nXRegExp.globalize(/[a-z]/i).xexec('abc');\n~~~\n\n\n## Installation and usage\n\nIn browsers:\n\n~~~ html\n<script src=\"xregexp-min.js\"></script>\n~~~\n\nOr, to bundle XRegExp with all of its addons:\n\n~~~ html\n<script src=\"xregexp-all-min.js\"></script>\n~~~\n\nUsing [npm](http://npmjs.org/):\n\n~~~ bash\nnpm install xregexp\n~~~\n\nIn [Node.js](http://nodejs.org/) and [CommonJS module](http://wiki.commonjs.org/wiki/Modules) loaders:\n\n~~~ js\nvar XRegExp = require('xregexp').XRegExp;\n~~~\n\n\n### Running tests on the server with npm\n\n~~~ bash\nnpm install -g qunit  # needed to run the tests\nnpm test  # in the xregexp root\n~~~\n\nIf XRegExp was not installed using npm, just open `tests/index.html` in your browser.\n\n\n## &c\n\n**Lookbehind:** A [collection of short functions](https://gist.github.com/2387872) is available that makes it easy to simulate infinite-length leading lookbehind.\n\n\n## Changelog\n\n* Releases: [Version history](http://xregexp.com/history/).\n* Upcoming: [Milestones](https://github.com/slevithan/XRegExp/issues/milestones), [Roadmap](https://github.com/slevithan/XRegExp/wiki/Roadmap).\n\n\n## About\n\nXRegExp and addons copyright 2007-2012 by [Steven Levithan](http://stevenlevithan.com/).\n\nTools: Unicode range generators by [Mathias Bynens](http://mathiasbynens.be/). Source file concatenator by [Bjarke Walling](http://twitter.com/walling).\n\nPrior art: `XRegExp.build` inspired by [Lea Verou](http://lea.verou.me/)'s [RegExp.create](http://lea.verou.me/2011/03/create-complex-regexps-more-easily/). `XRegExp.union` inspired by [Ruby](http://www.ruby-lang.org/). XRegExp's syntax extensions come from Perl, .NET, etc.\n\nAll code released under the [MIT License](http://mit-license.org/).\n\nFork me to show support, fix, and extend.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/xregexp/-/xregexp-2.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/xregexp/-/xregexp-2.0.0.tgz",
    "hash": "",
    "integrity": "sha1-UqY+VsoLhKfzpfPWGHLxJq16WUM=",
    "registry": "npm",
    "packageName": "xregexp",
    "cacheIntegrity": "sha512-xl/50/Cf32VsGq/1R8jJE5ajH1yMCQkpmoS10QbFZWl2Oor4H0Me64Pu2yxvsRWK3m6soJbmGfzSR7BYmDcWAA== sha1-UqY+VsoLhKfzpfPWGHLxJq16WUM="
  },
  "registry": "npm",
  "hash": "c65ff9d3f09fdf656c1aaff547c8c91396a31f5c8c0909299a84b5d106c56569763a8af81f431eeb83eedb2c6fb1158ade6eaca096e619fcd247b05898371600"
}