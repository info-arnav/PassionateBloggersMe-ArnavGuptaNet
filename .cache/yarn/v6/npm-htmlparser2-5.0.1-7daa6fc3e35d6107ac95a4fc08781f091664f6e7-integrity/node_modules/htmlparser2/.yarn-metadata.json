{
  "manifest": {
    "name": "htmlparser2",
    "description": "Fast & forgiving HTML/XML/RSS parser",
    "version": "5.0.1",
    "author": {
      "name": "Felix Boehm",
      "email": "me@feedic.com"
    },
    "funding": "https://github.com/fb55/htmlparser2?sponsor=1",
    "license": "MIT",
    "sideEffects": false,
    "keywords": [
      "html",
      "parser",
      "streams",
      "xml",
      "dom",
      "rss",
      "feed",
      "atom"
    ],
    "repository": {
      "type": "git",
      "url": "git://github.com/fb55/htmlparser2.git"
    },
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "files": [
      "lib/**/*"
    ],
    "scripts": {
      "test": "jest --coverage",
      "lint": "npm run lint:es && npm run lint:prettier",
      "lint:es": "eslint src",
      "lint:prettier": "npm run format:prettier:raw -- --check",
      "format": "npm run format:es && npm run format:prettier",
      "format:es": "npm run lint:es -- --fix",
      "format:prettier": "npm run format:prettier:raw -- --write",
      "format:prettier:raw": "prettier '**/*.{ts,md,json,yml}'",
      "build": "tsc",
      "prepare": "npm run build"
    },
    "dependencies": {
      "domelementtype": "^2.0.1",
      "domhandler": "^3.3.0",
      "domutils": "^2.4.2",
      "entities": "^2.0.0"
    },
    "devDependencies": {
      "@types/jest": "^26.0.0",
      "@types/node": "^14.0.5",
      "@typescript-eslint/eslint-plugin": "^4.1.0",
      "@typescript-eslint/parser": "^4.1.0",
      "eslint": "^7.0.0",
      "eslint-config-prettier": "^6.0.0",
      "jest": "^26.0.1",
      "prettier": "^2.1.1",
      "ts-jest": "^26.0.0",
      "typescript": "^4.0.2"
    },
    "jest": {
      "preset": "ts-jest",
      "testEnvironment": "node"
    },
    "prettier": {
      "tabWidth": 4
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-htmlparser2-5.0.1-7daa6fc3e35d6107ac95a4fc08781f091664f6e7-integrity/node_modules/htmlparser2/package.json",
    "readmeFilename": "README.md",
    "readme": "# htmlparser2\n\n[![NPM version](http://img.shields.io/npm/v/htmlparser2.svg?style=flat)](https://npmjs.org/package/htmlparser2)\n[![Downloads](https://img.shields.io/npm/dm/htmlparser2.svg?style=flat)](https://npmjs.org/package/htmlparser2)\n[![Build Status](https://img.shields.io/github/workflow/status/fb55/htmlparser2/Node.js%20Test?label=tests&style=flat)](https://github.com/fb55/htmlparser2/actions?query=workflow%3A%22Node.js+Test%22)\n[![Coverage](http://img.shields.io/coveralls/fb55/htmlparser2.svg?style=flat)](https://coveralls.io/r/fb55/htmlparser2)\n\nA forgiving HTML/XML/RSS parser.\nThe parser can handle streams and provides a callback interface.\n\n## Installation\n\n    npm install --save htmlparser2\n\nA live demo of htmlparser2 is available [here](https://astexplorer.net/#/2AmVrGuGVJ).\n\n## Usage\n\n```javascript\nconst htmlparser2 = require(\"htmlparser2\");\nconst parser = new htmlparser2.Parser({\n    onopentag(name, attribs) {\n        if (name === \"script\" && attribs.type === \"text/javascript\") {\n            console.log(\"JS! Hooray!\");\n        }\n    },\n    ontext(text) {\n        console.log(\"-->\", text);\n    },\n    onclosetag(tagname) {\n        if (tagname === \"script\") {\n            console.log(\"That's it?!\");\n        }\n    },\n});\nparser.write(\n    \"Xyz <script type='text/javascript'>var foo = '<<bar>>';</ script>\"\n);\nparser.end();\n```\n\nOutput (simplified):\n\n```\n--> Xyz\nJS! Hooray!\n--> var foo = '<<bar>>';\nThat's it?!\n```\n\n### Usage with streams\n\nWhile the `Parser` interface closely resembles Node.js streams, it's not a 100% match.\nUse the `WritableStream` interface to process a streaming input:\n\n```javascript\nconst { WritableStream } = require(\"htmlparser2/lib/WritableStream\");\nconst parserStream = new WritableStream({\n    ontext(text) {\n        console.log(\"Streaming:\", text);\n    },\n});\n\nconst htmlStream = fs.createReadStream(\"./my-file.html\");\nhtmlStream.pipe(parserStream).on(\"finish\", () => console.log(\"done\"));\n```\n\n## Documentation\n\nRead more about the parser and its options in the [wiki](https://github.com/fb55/htmlparser2/wiki/Parser-options).\n\n## Get a DOM\n\nThe `DomHandler` produces a DOM (document object model) that can be manipulated using the [`DomUtils`](https://github.com/fb55/DomUtils) helper.\n\nThe `DomHandler`, while still bundled with this module, was moved to its [own module](https://github.com/fb55/domhandler).\nHave a look at that for further information.\n\n## Parsing RSS/RDF/Atom Feeds\n\n```javascript\nconst feed = htmlparser2.parseFeed(content, options);\n```\n\nNote: While the provided feed handler works for most feeds,\nyou might want to use [danmactough/node-feedparser](https://github.com/danmactough/node-feedparser), which is much better tested and actively maintained.\n\n## Performance\n\nAfter having some artificial benchmarks for some time, **@AndreasMadsen** published his [`htmlparser-benchmark`](https://github.com/AndreasMadsen/htmlparser-benchmark), which benchmarks HTML parses based on real-world websites.\n\nAt the time of writing, the latest versions of all supported parsers show the following performance characteristics on [Travis CI](https://travis-ci.org/AndreasMadsen/htmlparser-benchmark/builds/10805007) (please note that Travis doesn't guarantee equal conditions for all tests):\n\n```\ngumbo-parser   : 34.9208 ms/file ± 21.4238\nhtml-parser    : 24.8224 ms/file ± 15.8703\nhtml5          : 419.597 ms/file ± 264.265\nhtmlparser     : 60.0722 ms/file ± 384.844\nhtmlparser2-dom: 12.0749 ms/file ± 6.49474\nhtmlparser2    : 7.49130 ms/file ± 5.74368\nhubbub         : 30.4980 ms/file ± 16.4682\nlibxmljs       : 14.1338 ms/file ± 18.6541\nparse5         : 22.0439 ms/file ± 15.3743\nsax            : 49.6513 ms/file ± 26.6032\n```\n\n## How does this module differ from [node-htmlparser](https://github.com/tautologistics/node-htmlparser)?\n\nThis module started as a fork of the `htmlparser` module.\nThe main difference is that `htmlparser2` is intended to be used only with node (it runs on other platforms using [browserify](https://github.com/substack/node-browserify)).\n`htmlparser2` was rewritten multiple times and, while it maintains an API that's compatible with `htmlparser` in most cases, the projects don't share any code anymore.\n\nThe parser now provides a callback interface inspired by [sax.js](https://github.com/isaacs/sax-js) (originally targeted at [readabilitySAX](https://github.com/fb55/readabilitysax)).\nAs a result, old handlers won't work anymore.\n\nThe `DefaultHandler` and the `RssHandler` were renamed to clarify their purpose (to `DomHandler` and `FeedHandler`). The old names are still available when requiring `htmlparser2`, your code should work as expected.\n\n## Security contact information\n\nTo report a security vulnerability, please use the [Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n\n## `htmlparser2` for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of `htmlparser2` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-htmlparser2?utm_source=npm-htmlparser2&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n",
    "licenseText": "Copyright 2010, 2011, Chris Winberry <chris@winberry.net>. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n \nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/htmlparser2/-/htmlparser2-5.0.1.tgz#7daa6fc3e35d6107ac95a4fc08781f091664f6e7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/htmlparser2/-/htmlparser2-5.0.1.tgz",
    "hash": "7daa6fc3e35d6107ac95a4fc08781f091664f6e7",
    "integrity": "sha512-vKZZra6CSe9qsJzh0BjBGXo8dvzNsq/oGvsjfRdOrrryfeD9UOBEEQdeoqCRmKZchF5h2zOBMQ6YuQ0uRUmdbQ==",
    "registry": "npm",
    "packageName": "htmlparser2",
    "cacheIntegrity": "sha512-vKZZra6CSe9qsJzh0BjBGXo8dvzNsq/oGvsjfRdOrrryfeD9UOBEEQdeoqCRmKZchF5h2zOBMQ6YuQ0uRUmdbQ== sha1-fapvw+NdYQeslaT8CHgfCRZk9uc="
  },
  "registry": "npm",
  "hash": "7daa6fc3e35d6107ac95a4fc08781f091664f6e7"
}