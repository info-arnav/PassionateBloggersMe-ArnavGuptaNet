{
  "manifest": {
    "name": "gtoken",
    "version": "2.3.3",
    "description": "Node.js Google Authentication Service Account Tokens",
    "main": "./build/src/index.js",
    "types": "./build/src/index.d.ts",
    "engines": {
      "node": ">=6.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/google/node-gtoken.git"
    },
    "scripts": {
      "lint": "gts check",
      "clean": "gts clean",
      "fix": "gts fix",
      "compile": "tsc -p .",
      "test": "nyc mocha build/test",
      "prepare": "npm run compile",
      "pretest": "npm run compile",
      "presystem-test": "npm run compile",
      "system-test": "mocha build/system-test",
      "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
      "docs": "compodoc src/",
      "docs-test": "linkinator docs -r --skip www.googleapis.com",
      "predocs-test": "npm run docs"
    },
    "keywords": [
      "google",
      "service",
      "account",
      "api",
      "token",
      "api",
      "auth"
    ],
    "author": {
      "name": "Ryan Seys"
    },
    "license": "MIT",
    "dependencies": {
      "gaxios": "^1.0.4",
      "google-p12-pem": "^1.0.0",
      "jws": "^3.1.5",
      "mime": "^2.2.0",
      "pify": "^4.0.0"
    },
    "devDependencies": {
      "@compodoc/compodoc": "^1.1.7",
      "@types/jws": "^3.1.0",
      "@types/mime": "^2.0.0",
      "@types/mocha": "^5.0.0",
      "@types/nock": "^9.1.2",
      "@types/node": "^10.0.3",
      "@types/pify": "^3.0.0",
      "codecov": "^3.0.2",
      "gts": "^0.9.0",
      "intelli-espower-loader": "^1.0.1",
      "js-green-licenses": "^0.5.0",
      "mocha": "^6.0.0",
      "nock": "^10.0.0",
      "nyc": "^13.0.0",
      "source-map-support": "^0.5.6",
      "typescript": "~3.3.0",
      "linkinator": "^1.1.2"
    },
    "files": [
      "build/src",
      "!build/src/**/*.map"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-gtoken-2.3.3-integrity/node_modules/gtoken/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-gtoken\n\n[![NPM Version][npm-image]][npm-url]\n[![Dependency Status][david-image]][david-url]\n[![devDependency Status][david-dev-image]][david-dev-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![codecov][codecov-image]][codecov-url]\n[![style badge][gts-image]][gts-url]\n\n> Node.js Google Authentication Service Account Tokens\n\n## Installation\n\n``` sh\nnpm install gtoken\n```\n\n## Usage\n\n### Use with a `.pem` or `.p12` key file:\n\n``` js\nconst { GoogleToken } = require('gtoken');\nconst gtoken = new GoogleToken({\n  keyFile: 'path/to/key.pem', // or path to .p12 key file\n  email: 'my_service_account_email@developer.gserviceaccount.com',\n  scope: ['https://scope1', 'https://scope2'] // or space-delimited string of scopes\n});\n\ngtoken.getToken(function(err, token) {\n  if (err) {\n    console.log(err);\n    return;\n  }\n  console.log(token);\n});\n```\n\nYou can also use the async/await style API:\n\n``` js\nconst token = await gtoken.getToken()\nconsole.log(token);\n```\n\nOr use promises:\n\n```js\ngtoken.getToken()\n  .then(token => {\n    console.log(`Token: ${token}`)\n  })\n  .catch(e => console.error);\n```\n\n### Use with a service account `.json` key file:\n\n``` js\nconst { GoogleToken } = require('gtoken');\nconst gtoken = new GoogleToken({\n  keyFile: 'path/to/key.json',\n  scope: ['https://scope1', 'https://scope2'] // or space-delimited string of scopes\n});\n\ngtoken.getToken(function(err, token) {\n  if (err) {\n    console.log(err);\n    return;\n  }\n  console.log(token);\n});\n```\n\n### Pass the private key as a string directly:\n\n``` js\nconst key = '-----BEGIN RSA PRIVATE KEY-----\\nXXXXXXXXXXX...';\nconst { GoogleToken } = require('gtoken');\nconst gtoken = new GoogleToken({\n  email: 'my_service_account_email@developer.gserviceaccount.com',\n  scope: ['https://scope1', 'https://scope2'], // or space-delimited string of scopes\n  key: key\n});\n```\n\n## Options\n\n> Various options that can be set when creating initializing the `gtoken` object.\n\n- `options.email or options.iss`: The service account email address.\n- `options.scope`: An array of scope strings or space-delimited string of scopes.\n- `options.sub`: The email address of the user requesting delegated access.\n- `options.keyFile`: The filename of `.json` key, `.pem` key or `.p12` key.\n- `options.key`: The raw RSA private key value, in place of using `options.keyFile`.\n\n### .getToken(callback)\n\n> Returns the cached token or requests a new one and returns it.\n\n``` js\ngtoken.getToken(function(err, token) {\n  console.log(err || token);\n  // gtoken.token value is also set\n});\n```\n\n### .getCredentials('path/to/key.json')\n\n> Given a keyfile, returns the key and (if available) the client email.\n\n```js\nconst creds = await gtoken.getCredentials('path/to/key.json');\n```\n\n### Properties\n\n> Various properties set on the gtoken object after call to `.getToken()`.\n\n- `gtoken.token`: The access token.\n- `gtoken.expiresAt`: The expiry date as milliseconds since 1970/01/01\n- `gtoken.key`: The raw key value.\n- `gtoken.rawToken`: Most recent raw token data received from Google.\n\n### .hasExpired()\n\n> Returns true if the token has expired, or token does not exist.\n\n``` js\ngtoken.getToken(function(err, token) {\n  if(token) {\n    gtoken.hasExpired(); // false\n  }\n});\n```\n\n### .revokeToken()\n\n> Revoke the token if set.\n\n``` js\ngtoken.revokeToken(function(err) {\n  if (err) {\n    console.log(err);\n    return;\n  }\n  console.log('Token revoked!');\n});\n```\n\n## Downloading your private `.p12` key from Google\n\n1. Open the [Google Developer Console][gdevconsole].\n2. Open your project and under \"APIs & auth\", click Credentials.\n3. Generate a new `.p12` key and download it into your project.\n\n## Converting your `.p12` key to a `.pem` key\n\nYou can just specify your `.p12` file (with `.p12` extension) as the `keyFile` and it will automatically be converted to a `.pem` on the fly, however this results in a slight performance hit. If you'd like to convert to a `.pem` for use later, use OpenSSL if you have it installed.\n\n``` sh\n$ openssl pkcs12 -in key.p12 -nodes -nocerts > key.pem\n```\n\nDon't forget, the passphrase when converting these files is the string `'notasecret'`\n\n## License\n\n[MIT](https://github.com/googleapis/node-gtoken/blob/master/LICENSE)\n\n[codecov-image]: https://codecov.io/gh/googleapis/node-gtoken/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/googleapis/node-gtoken\n[david-image]: https://david-dm.org/googleapis/node-gtoken.svg\n[david-url]: https://david-dm.org/googleapis/node-gtoken\n[david-dev-image]: https://david-dm.org/googleapis/node-gtoken/dev-status.svg\n[david-dev-url]: https://david-dm.org/googleapis/node-gtoken?type=dev\n[gdevconsole]: https://console.developers.google.com\n[gts-image]: https://img.shields.io/badge/code%20style-Google%20%E2%98%82%EF%B8%8F-blue.svg\n[gts-url]: https://www.npmjs.com/package/gts\n[npm-image]: https://img.shields.io/npm/v/gtoken.svg\n[npm-url]: https://npmjs.org/package/gtoken\n[snyk-image]: https://snyk.io/test/github/googleapis/node-gtoken/badge.svg\n[snyk-url]: https://snyk.io/test/github/googleapis/node-gtoken\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Ryan Seys\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/gtoken/-/gtoken-2.3.3.tgz",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/gtoken/-/gtoken-2.3.3.tgz",
    "hash": "",
    "integrity": "sha512-EaB49bu/TCoNeQjhCYKI/CurooBKkGxIqFHsWABW0b25fobBYVTMe84A8EBVVZhl8emiUdNypil9huMOTmyAnw==",
    "registry": "npm",
    "packageName": "gtoken",
    "cacheIntegrity": "sha512-EaB49bu/TCoNeQjhCYKI/CurooBKkGxIqFHsWABW0b25fobBYVTMe84A8EBVVZhl8emiUdNypil9huMOTmyAnw== sha1-in/hVcXODEtxyIbPsoKpBg2UpkE="
  },
  "registry": "npm",
  "hash": "11a078f5bbbf4c2a0d7908e1098288fc2baba2804a906c48a851ec580056d1bdb97e86c16154cc7bce00f04055559865f1e9a251d372a6297d86e30e4e6c809f"
}