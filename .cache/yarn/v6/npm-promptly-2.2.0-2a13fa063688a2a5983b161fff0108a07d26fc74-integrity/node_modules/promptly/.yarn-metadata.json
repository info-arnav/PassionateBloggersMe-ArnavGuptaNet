{
  "manifest": {
    "name": "promptly",
    "version": "2.2.0",
    "description": "Simple command line prompting utility",
    "main": "index.js",
    "dependencies": {
      "read": "^1.0.4"
    },
    "devDependencies": {
      "async": "^2.0.0",
      "expect.js": "^0.3.1",
      "mocha": "^3.0.2"
    },
    "scripts": {
      "test": "mocha --bail"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/IndigoUnited/node-promptly"
    },
    "bugs": {
      "url": "http://github.com/IndigoUnited/node-promptly/issues"
    },
    "keywords": [
      "prompt",
      "choose",
      "choice",
      "cli",
      "command",
      "line"
    ],
    "author": {
      "name": "IndigoUnited",
      "email": "hello@indigounited.com",
      "url": "http://indigounited.com"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-promptly-2.2.0-2a13fa063688a2a5983b161fff0108a07d26fc74-integrity/node_modules/promptly/package.json",
    "readmeFilename": "README.md",
    "readme": "# promptly\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency status][david-dm-image]][david-dm-url] [![Dev Dependency status][david-dm-dev-image]][david-dm-dev-url]\n\n[npm-url]:https://npmjs.org/package/promptly\n[downloads-image]:http://img.shields.io/npm/dm/promptly.svg\n[npm-image]:http://img.shields.io/npm/v/promptly.svg\n[travis-url]:https://travis-ci.org/IndigoUnited/node-promptly\n[travis-image]:http://img.shields.io/travis/IndigoUnited/node-promptly/master.svg\n[david-dm-url]:https://david-dm.org/IndigoUnited/node-promptly\n[david-dm-image]:https://img.shields.io/david/IndigoUnited/node-promptly.svg\n[david-dm-dev-url]:https://david-dm.org/IndigoUnited/node-promptly#info=devDependencies\n[david-dm-dev-image]:https://img.shields.io/david/dev/IndigoUnited/node-promptly.svg\n\nSimple command line prompting utility.\n\n\n## Installation\n\n`$ npm install promptly`\n\n\n## API\n\n### .prompt(message, [opts], [fn])\n\nPrompts for a value, printing the `message` and waiting for the input.   \nWhen done, calls `fn` with `error` and `value` or returns a `Promise` if no `fn` is provided.\n\nDefault options:\n```js\n{\n    // The default value. If not supplied, the input is mandatory\n    'default': null,\n    // Automatically trim the input\n    'trim': true,\n    // A validator or an array of validators.\n    'validator': null,\n    // Automatically retry if a validator fails\n    'retry': true,\n    // Do not print what the user types\n    'silent': false,\n    // Replace each character with the specified string when 'silent' is true\n    'replace': '',\n    // Input and output streams to read and write to\n    'input': process.stdin,\n    'output': process.stdout\n}\n```\n\nThe validators have two purposes:\n\n```js\nfunction (value) {\n    // Validation example, throwing an error when invalid\n    if (value.length !== 2) {\n        throw new Error('Length must be 2');\n    }\n\n    // Parse the value, modifying it\n    return value.replace('aa', 'bb');\n}\n```\n\nExample usages\n\nAsk for a name:\n\n```js\npromptly.prompt('Name: ', function (err, value) {\n    // err is always null in this case, because no validators are set\n    console.log(value);\n});\n```\n\nUsing Promise:\n\n```js\npromptly.prompt('Name: ')\n.then(function (value) {\n    // no need for catch in this case, because no validators are set\n    console.log(value);\n});\n```\n\nAsk for a name with a constraint (non-empty value and length > 2):\n\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n};\n\npromptly.prompt('Name: ', { validator: validator }, function (err, value) {\n    // Since retry is true by default, err is always null\n    // because promptly will be prompting for a name until it validates\n    // Between each prompt, the error message from the validator will be printed\n    console.log('Name is:', value);\n});\n```\n\nSame as above but do not retry automatically:\n\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n};\n\npromptly.prompt('Name: ', { validator: validator, retry: false }, function (err, value) {\n    if (err) {\n        console.error('Invalid name:', err.message);\n        // Manually call retry\n        // The passed error has a retry method to easily prompt again.\n        return err.retry();\n    }\n\n    console.log('Name is:', value);\n});\n```\n\n### .confirm(message, [opts], fn)\n\nAsk the user to confirm something.   \nCalls `fn` with `error` and `value` (true or false).\n\nTruthy values are: `y`, `yes` and `1`.   \nFalsy values are `n`, `no`, and `0`.   \nComparison is made in a case insensitive way.\n\nExample usage:\n\n```js\npromptly.confirm('Are you sure? ', function (err, value) {\n    console.log('Answer:', value);\n});\n```\n\n\n### .choose(message, choices, [opts], fn)\n\nAsk the user to choose between multiple `choices` (array of choices).   \nCalls `fn` with `error` and `value`.\n\nExample usage:\n\n```js\npromptly.choose('Do you want an apple or an orange? ', ['apple', 'orange'], function (err, value) {\n    console.log('Answer:', value);\n});\n```\n\n\n### .password(message, [opts], fn)\n\nPrompts for a password, printing the `message` and waiting for the input.   \nWhen available, calls `fn` with `error` and `value`.\n\nThe available options are the same, except that `trim` and `silent` default to `false` and `default` is an empty string (to allow empty passwords).\n\nExample usage:\n\n```js\npromptly.password('Type a password: ', { replace: '*' }, function (err, value) {\n    console.log('Password is:', value);\n});\n```\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n",
    "licenseText": "Copyright (c) 2012 IndigoUnited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/promptly/-/promptly-2.2.0.tgz#2a13fa063688a2a5983b161fff0108a07d26fc74",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/promptly/-/promptly-2.2.0.tgz",
    "hash": "2a13fa063688a2a5983b161fff0108a07d26fc74",
    "integrity": "sha1-KhP6BjaIoqWYOxYf/wEIoH0m/HQ=",
    "registry": "npm",
    "packageName": "promptly",
    "cacheIntegrity": "sha512-aC9j+BZsRSSzEsXBNBwDnAxujdx19HycZoKgRgzWnS8eOHg1asuf9heuLprfbe739zY3IdUQx+Egv6Jn135WHA== sha1-KhP6BjaIoqWYOxYf/wEIoH0m/HQ="
  },
  "registry": "npm",
  "hash": "2a13fa063688a2a5983b161fff0108a07d26fc74"
}