{
  "manifest": {
    "name": "jest-serializer",
    "version": "23.0.1",
    "repository": {
      "type": "git",
      "url": "https://github.com/facebook/jest.git"
    },
    "license": "MIT",
    "main": "build/index.js",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-jest-serializer-23.0.1-integrity/node_modules/jest-serializer/package.json",
    "readmeFilename": "README.md",
    "readme": "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
    "description": "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jest-serializer/-/jest-serializer-23.0.1.tgz",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jest-serializer/-/jest-serializer-23.0.1.tgz",
    "hash": "",
    "integrity": "sha1-o3dq6zEekP6D+rnlM+hRAr0WQWU=",
    "registry": "npm",
    "packageName": "jest-serializer",
    "cacheIntegrity": "sha512-l6cPuiGEQI72H4+qMePF62E+URkZscnAqdHBYHkMrhKJOwU08AHvGmftXdosUzfCGhh/Ih4Xk1VgxnJSwrvQvQ== sha1-o3dq6zEekP6D+rnlM+hRAr0WQWU="
  },
  "registry": "npm",
  "hash": "97a70fba2184408ef61f8faa31e3c5eb613e511919b1c9c0a9d1c160790cae12893b0534f001ef1a67ed5dda2c5337c21a187f221e17935560c67252c2bbd0bd"
}