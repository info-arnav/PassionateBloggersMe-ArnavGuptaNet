{
  "manifest": {
    "name": "@pm2/io",
    "version": "4.3.5",
    "description": "PM2.io NodeJS APM",
    "main": "build/main/index.js",
    "typings": "build/main/index.d.ts",
    "types": "build/main/index.d.ts",
    "module": "build/module/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/keymetrics/pm2-io-apm"
    },
    "author": {
      "name": "PM2.io tech team",
      "email": "tech@pm2.io",
      "url": "https://pm2.io"
    },
    "contributors": [
      {
        "name": "Vincent Vallet",
        "url": "https://github.com/wallet77"
      }
    ],
    "license": "Apache-2.0",
    "scripts": {
      "build": "tsc -p tsconfig.json",
      "build:module": "tsc -p config/exports/tsconfig.module.json",
      "lint": "tslint --project . src/**/*.ts",
      "unit": "npm run build && bash test.sh",
      "mono": "mocha  --exit --require ts-node/register",
      "test": "npm run unit",
      "watch": "tsc -w",
      "prepublishOnly": "npm run build"
    },
    "scripts-info": {
      "build": "(Trash and re)build the library",
      "lint": "Lint all typescript source files",
      "unit": "Build the library and run unit tests",
      "test": "Lint, build, and test the library",
      "watch": "Watch source files, rebuild library on changes, rerun relevant tests"
    },
    "engines": {
      "node": ">=6.0"
    },
    "devDependencies": {
      "@types/chai": "4.1.4",
      "@types/express": "~4.16.1",
      "@types/ioredis": "~4.0.6",
      "@types/mocha": "5.2.5",
      "@types/mongodb": "~3.1.19",
      "@types/node": "~10.12.21",
      "@types/redis": "~2.8.10",
      "chai": "4.1.2",
      "mocha": "~7.1.0",
      "nock": "~10.0.6",
      "nyc": "~13.1.0",
      "source-map-support": "~0.5.9",
      "ts-node": "~7.0.1",
      "tslint": "~5.11.0",
      "tslint-config-standard": "~8.0.1",
      "typescript": "~3.2.2",
      "@pm2/node-runtime-stats": "^0.3.2",
      "express": "^4.17.1",
      "ioredis": "^4.16.3",
      "koa": "^2.11.0",
      "mongodb-core": "^3.2.7",
      "mysql": "^2.18.1",
      "mysql2": "^2.1.0",
      "pg": "^7.18.2",
      "redis": "^3.0.2",
      "vue": "^2.6.11",
      "vue-server-renderer": "^2.6.11"
    },
    "keywords": [],
    "nyc": {
      "extension": [
        ".ts"
      ],
      "exclude": [
        "build/",
        "config/",
        "examples/",
        "test/"
      ],
      "cache": true,
      "all": true
    },
    "dependencies": {
      "@opencensus/core": "0.0.9",
      "@opencensus/propagation-b3": "0.0.8",
      "@pm2/agent-node": "^1.1.10",
      "async": "~2.6.1",
      "debug": "4.1.1",
      "eventemitter2": "^6.3.1",
      "require-in-the-middle": "^5.0.0",
      "semver": "6.3.0",
      "shimmer": "^1.2.0",
      "signal-exit": "^3.0.3",
      "tslib": "1.9.3"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@pm2-io-4.3.5-integrity/node_modules/@pm2/io/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"http://pm2.keymetrics.io\">\n    <img width=411px src=\"https://raw.githubusercontent.com/keymetrics/pm2-io-apm/master/pres/io-white.png\">\n  </a>\n  <br/>\n\n<br/>\n<br/>\n</div>\n\n\nThe [@pm2/io](https://github.com/keymetrics/pm2-io-apm/tree/master/test) module comes along with PM2. It is the PM2 library responsible for gathering the metrics, reporting exceptions, exposing remote actions and every interaction with your application.\n\nYou can also use it as a standalone agent, if you want to connect your nodejs process to PM2 Enterprise but without having to launch your application with PM2.\n\n# Table of Contents\n\n- [**Installation**](https://github.com/keymetrics/pm2-io-apm/tree/master#installation)\n- [**Expose Custom Metrics**](https://github.com/keymetrics/pm2-io-apm/tree/master#expose-custom-metrics)\n- [**Expose Remote Actions**](https://github.com/keymetrics/pm2-io-apm#expose-remote-actions-trigger-functions-remotely)\n- [**Report Custom Errors**](https://github.com/keymetrics/pm2-io-apm#report-user-error)\n- [**Distributed Tracing**](https://github.com/keymetrics/pm2-io-apm#distributed-tracing)\n- [**Configuration**](https://github.com/keymetrics/pm2-io-apm/tree/master#configuration)\n- [**Migration Guide**](https://github.com/keymetrics/pm2-io-apm#migration-guides)\n- [**Development**](https://github.com/keymetrics/pm2-io-apm/tree/master#development)\n- [**Notes**](https://github.com/keymetrics/pm2-io-apm/tree/master#notes)\n\n\n# Installation\n\nWith npm:\n\n```bash\nnpm install @pm2/io --save\n```\n\nWith yarn:\n\n```bash\nyarn add @pm2/io\n```\n\n## V8 Runtime Metrics\n\nTo retrieve by default V8 Runtime metrics like:\n- V8 Garbage Collector metrics\n- [CPU Context Switch](https://unix.stackexchange.com/questions/442969/what-exactly-are-voluntary-context-switches)\n- [Page Fault](https://en.wikipedia.org/wiki/Page_fault#Types)\n\nInstall:\n\n```bash\nnpm install @pm2/node-runtime-stats\n```\n\nAnd restart the application.\n\n## Custom Metrics\n\n@pm2/io allows you to gather metrics from your code to be reported in the PM2 Plus/Enterprise dashboard.\n\n### Create a custom metrics\n\nYou can create a new custom metrics with the method `metric()` of `@pm2/io`.\n\n```javascript\nconst io = require('@pm2/io');\n\nconst users = io.metric({\n  name: 'Realtime user',\n});\nusers.set(10)\n```\n\nThis arguments are available:\n\n- **name**: The metric name (required; string)\n- **id**: The type of metric (default 'metric', string)\n- **unit**: unit of the measure (default ''; string)\n- **historic**: keep the history in PM2 Plus (default: true; boolean)\n\nThere are 4 different types of metrics:\n\n- **gauge**: To expose a variable's value\n- **counter**: A discrete counter to be triggered manually to count a number of occurrence\n- **meter**: To measure a frequency, a number of occurrences of a repeating event per unit of time\n- **histogram**: To measure a statistic, a statistic on a metric over the last 5 minutes\n\n### Metric: Variable Exposition\n\nThe first type of metric, called `metric`, allows to expose a variable's value. The variable can be exposed passively, with a function that gets called every second, or actively, with a method that you use to update the value.\n\n#### Active Mode\n\nIn active mode, you need to create a probe and call the method `set()` to update the value.\n\n```javascript\nconst myMetric = io.metric({\n  name: 'Realtime Value'\n});\n\nmyMetric.set(23);\n```\n\n#### Passive Mode\n\nIn passive mode you hust need to return the variable to be monitored:\n\n```javascript\nconst myMetric = io.metric({\n  name: 'Realtime Value',\n  value: () => {\n    return variable_to_monitor\n  }\n});\n```\n\n### Counter: Discrete Counter\n\nThe second type of metric, called `counter`, is a discrete counter that helps you count the number of occurrence of a particular event. The counter starts at 0 and can be incremented or decremented.\n\n```javascript\nconst io = require('@pm2/io');\n\nconst currentReq = io.counter({\n  name: 'Current req processed',\n  type: 'counter',\n});\n\nhttp.createServer((req, res) => {\n  // Increment the counter, counter will eq 1\n  currentReq.inc();\n  req.on('end', () => {\n    // Decrement the counter, counter will eq 0\n    currentReq.dec();\n  });\n});\n```\n\n### Meter: Frequency\n\nThe third type of metric, called `meter`, compute the frequency of an event. Each time the event happens, you need to call the `mark()` method. By default, the frequency is the number of events per second over the last minute.\n\n```javascript\nconst io = require('@pm2/io');\n\nconst reqsec = io.meter({\n  name: 'req/sec',\n  type: 'meter',\n});\n\nhttp.createServer((req, res) => {\n  reqsec.mark();\n  res.end({ success: true });\n});\n```\n\nAdditional options:\n- **samples**: (optional)(default: 1) Rate unit. Defaults to **1** sec.\n- **timeframe**: (optional)(default: 60) Timeframe over which the events will be analyzed. Defaults to **60** sec.\n\n### Histogram: Statistics\n\nCollect values and provide statistic tools to explore their distribution over the last 5 minutes.\n\n```javascript\nconst io = require('@pm2/io');\n\nconst latency = io.histogram({\n  name: 'latency',\n  measurement: 'mean'\n});\n\nvar latencyValue = 0;\n\nsetInterval(() => {\n  latencyValue = Math.round(Math.random() * 100);\n  latency.update(latencyValue);\n}, 100);\n```\n\nOptions are:\n- **measurement** : default: mean; min, max, sum, count, variance, mean, stddev, median, p75, p95, p99, p99.\n\n## Expose Remote Actions: Trigger Functions remotely\n\nRemotely trigger functions from PM2 Plus or Enterprise.\n\n### Simple actions\n\nThe function takes a function as a parameter (cb here) and need to be called once the job is finished.\n\nExample:\n\n```javascript\nconst io = require('@pm2/io');\n\nio.action('db:clean', (cb) => {\n  clean.db(() => {\n    // cb must be called at the end of the action\n    return cb({ success: true });\n  });\n});\n```\n\n## Report user error\n\nBy default, in the Issue tab, you are only alerted for uncaught exceptions. Any exception that you catch is not reported. You can manually report them with the `notifyError()` method.\n\n```javascript\nconst io = require('@pm2/io');\n\nio.notifyError(new Error('This is an error'), {\n  // you can some http context that will be reported in the UI\n  http: {\n    url: req.url\n  },\n  // or anything that you can like an user id\n  custom: {\n    user: req.user.id\n  }\n});\n```\n\n#### Express error reporting\n\nIf you want you can configure your express middleware to automatically send you an error with the error middleware of express :\n\n```javascript\nconst io = require('@pm2/io')\nconst express = require('express')\nconst app = express()\n\n// add the routes that you want\napp.use('/toto', () => {\n  throw new Error('ajdoijerr')\n})\n\n// always add the middleware as the last one\napp.use(io.expressErrorHandler())\n```\n\n#### Koa error reporting\n\nWe also expose a custom koa middleware to report error with a specific koa middleware :\n\n```javascript\nconst io = require('@pm2/io')\nconst Koa = require('koa')\nconst app = new Koa()\n\n// the order isn't important with koa\napp.use(pmx.koaErrorHandler())\n\n// add the routes that you want\napp.use(async ctx => {\n  ctx.throw(new Error('toto'))\n})\n```\n\n## Distributed Tracing\n\nThe Distributed Tracing allows to captures and propagates distributed traces through your system, allowing you to visualize how customer requests flow across services, rapidly perform deep root cause analysis, and better analyze latency across a highly distributed set of services.\nIf you want to enable it, here the simple options to enable:\n\n\n```javascript\nconst io = require('@pm2/io').init({\n  tracing: {\n    enabled: true,\n    // will add the actual queries made to database, false by default\n    detailedDatabasesCalls: true,\n    // if you want you can ignore some endpoint based on their path\n    ignoreIncomingPaths: [\n      // can be a regex\n      /misc/,\n      // or a exact string\n      '/api/bucket'\n      // or a function with the request\n      (url, request) => {\n        return true\n      }\n    ],\n    // same as above but used to match entire URLs\n    ignoreOutgoingUrls: [],\n    /**\n     * Determines the probability of a request to be traced. Ranges from 0.0 to 1.0\n     * default is 0.5\n     */\n    samplingRate: 0.5\n  }\n})\n```\n\nBy default we ignore specific incoming requests (you can override this by setting `ignoreIncomingPaths: []`):\n- Request with the OPTIONS or HEAD method\n- Request fetching a static ressources (`*.js`, `*.css`, `*.ico`, `*.svg`, `.png` or `*webpack*`)\n\n### What's get traced\n\nWhen your application will receive a request from either `http`, `https` or `http2` it will start a trace. After that, we will trace the following modules:\n - `http` outgoing requests\n - `https` outgoing requests\n - `http2` outgoing requests\n - `mongodb-core` version 1 - 3\n - `redis` versions > 2.6\n - `ioredis` versions > 2.6\n - `mysql` version 1 - 3\n - `mysql2` version 1 - 3\n - `pg` version > 6\n - `vue-server-renderer` version 2\n\n### Custom Tracing API\n\nThe custom tracing API can be used to create custom trace spans. A span is a particular unit of work within a trace, such as an RPC request. Spans may be nested; the outermost span is called a root span, even if there are no nested child spans. Root spans typically correspond to incoming requests, while child spans typically correspond to outgoing requests, or other work that is triggered in response to incoming requests. This means that root spans shouldn't be created in a context where a root span already exists; a child span is more suitable here. Instead, root spans should be created to track work that happens outside of the request lifecycle entirely, such as periodically scheduled work. To illustrate:\n\n```js\nconst io = require('@pm2/io').init({ tracing: true })\nconst tracer = io.getTracer()\n// ...\n\napp.get('/:token', function (req, res) {\n  const token = req.params.token\n  // the '2' correspond to the type of operation you want to trace\n  // can be 0 (UNKNOWN), 1 (SERVER) or 2 (CLIENT)\n  // 'verifyToken' here will be the name of the operation\n  const customSpan = tracer.startChildSpan('verifyToken', 2)\n  // note that customSpan can be null if you are not inside a request\n  req.Token.verifyToken(token, (err, result) => {\n    if (err) {\n      // you can add tags to the span to attach more details to the span\n      customSpan.addAttribute('error', err.message)\n      customSpan.end()\n      return res.status(500).send('error')\n    }\n    customSpan.addAttribute('result', result)\n    // be sure to always .end() the spans\n    customSpan.end()\n    // redirect the user if the token is valid\n    res.send('/user/me')\n  })\n})\n\n// For any significant work done _outside_ of the request lifecycle, use\n// startRootSpan.\nconst traceOptions = {\n    name: 'my custom trace',\n    // the '1' correspond to the type of operation you want to trace\n    // can be 0 (UNKNOWN), 1 (SERVER) or 2 (CLIENT)\n    kind: '1'\n  }\nplugin.tracer.startRootSpan(traceOptions, rootSpan => {\n  // ...\n  // Be sure to call rootSpan.end().\n  rootSpan.end()\n});\n```\n\n## Configuration\n\n### Global configuration object\n\n```javascript\nexport class IOConfig {\n  /**\n   * Automatically catch unhandled errors\n   */\n  catchExceptions?: boolean = true\n  /**\n   * Configure the metrics to add automatically to your process\n   */\n  metrics?: {\n    eventLoop: boolean = true,\n    network: boolean = false,\n    http: boolean = true,\n    gc: boolean = true,\n    v8: boolean = true\n  }\n  /**\n   * Configure the default actions that you can run\n   */\n  actions?: {\n    eventLoopDump?: boolean = true\n  }\n  /**\n   * Configure availables profilers that will be exposed\n   */\n  profiling?: {\n    /**\n     * Toggle the CPU profiling actions\n     */\n    cpuJS: boolean = true\n    /**\n     * Toggle the heap snapshot actions\n     */\n    heapSnapshot: boolean = true\n    /**\n     * Toggle the heap sampling actions\n     */\n    heapSampling: boolean = true\n    /**\n     * Force a specific implementation of profiler\n     *\n     * available:\n     *  - 'addon' (using the v8-profiler-node8 addon)\n     *  - 'inspector' (using the \"inspector\" api from node core)\n     *  - 'none' (disable the profilers)\n     *  - 'both' (will try to use inspector and fallback on addon if available)\n     */\n    implementation: string = 'both'\n  }\n  /**\n   * Configure the transaction tracing options\n   */\n  tracing?: {\n    /**\n     * Enabled the distributed tracing feature.\n     */\n    enabled: boolean\n    /**\n     * If you want to report a specific service name\n     * the default is the same as in apmOptions\n     */\n    serviceName?: string\n    /**\n     * Generate trace for outgoing request that aren't connected to a incoming one\n     * default is false\n     */\n    outbound?: boolean\n    /**\n     * Determines the probability of a request to be traced. Ranges from 0.0 to 1.0\n     * default is 0.5\n     */\n    samplingRate?: number,\n    /**\n     * Add details about databases calls (redis, mongodb etc)\n     */\n    detailedDatabasesCalls?: boolean,\n    /**\n     * Ignore specific incoming request depending on their path\n     */\n    ignoreIncomingPaths?: Array<IgnoreMatcher<httpModule.IncomingMessage>>\n    /**\n     * Ignore specific outgoing request depending on their url\n     */\n    ignoreOutgoingUrls?: Array<IgnoreMatcher<httpModule.ClientRequest>>\n    /**\n     * Set to true when wanting to create span for raw TCP connection\n     * instead of new http request\n     */\n    createSpanWithNet: boolean\n  }\n  /**\n   * If you want to connect to PM2 Enterprise without using PM2, you should enable\n   * the standalone mode\n   *\n   * default is false\n   */\n  standalone?: boolean = false\n  /**\n   * Define custom options for the standalone mode\n   */\n  apmOptions?: {\n    /**\n     * public key of the bucket to which the agent need to connect\n     */\n    publicKey: string\n    /**\n     * Secret key of the bucket to which the agent need to connect\n     */\n    secretKey: string\n    /**\n     * The name of the application/service that will be reported to PM2 Enterprise\n     */\n    appName: string\n    /**\n     * The name of the server as reported in PM2 Enterprise\n     *\n     * default is os.hostname()\n     */\n    serverName?: string\n    /**\n     * Broadcast all the logs from your application to our backend\n     */\n    sendLogs?: Boolean\n    /**\n     * Avoid to broadcast any logs from your application to our backend\n     * Even if the sendLogs option set to false, you can still see some logs\n     * when going to the log interface (it automatically trigger broacasting log)\n     */\n    disableLogs?: Boolean\n    /**\n     * Since logs can be forwared to our backend you may want to ignore specific\n     * logs (containing sensitive data for example)\n     */\n    logFilter?: string | RegExp\n    /**\n     * Proxy URI to use when reaching internet\n     * Supporting socks5,http,https,pac,socks4\n     * see https://github.com/TooTallNate/node-proxy-agent\n     *\n     * example: socks5://username:password@some-socks-proxy.com:9050\n     */\n    proxy?: string\n  }\n}\n```\n\nYou can pass whatever options you want to `io.init`, it will automatically update its configuration.\n\n## Migration Guides\n\n### 2.x to 3.x\n\nHere the list of breaking changes :\n\n- Removed `io.scopedAction` because of low user adoption\n- Removed `io.notify` in favor of `io.notifyError` (droppin replacement)\n- Removed support for `gc-stats` module\n- Removed Heap profiling support when using the profiler addon (which wasn't possible at all)\n- Removed deep-metrics support (the module that allowed to get metrics about websocket/mongo out of the box), we are working on a better solution.\n- Removed `io.transpose`\n- Removed `io.probe()` to init metrics\n- **Changed the configuration structure**\n\nHigh chance that if you used a custom configuration for `io.init`, you need to change it to reflect the new configuration.\nApart from that and the `io.notify` removal, it shouldn't break the way you instanciated metrics.\nIf you find something else that breaks please report it to us (tech@keymetrics.io).\n\n### 3.x to 4.x\n\nThe only difference with the 4.x version is the new tracing system put in place, so the only changs are related to it:\n\n- **Dropped the support for node 4** (you can still use the 3.x if you use node 4 but you will not have access to the distributed tracing)\n- **Changed the tracing configuration** (see options above)\n\n## Development\n\nTo auto rebuild on file change:\n\n```bash\n$ npm install\n$ npm run watch\n```\n\nTo test only one file:\n\n```bash\n$ npm run unit <typescript-file-to-test.ts>\n```\n\nRun transpilation + test + coverage:\n\n```bash\n$ npm run test\n```\n\nRun transpilation + test only:\n\n```bash\n$ npm run unit <test>\n```\n\n## Notes\n\nCurently this package isn't compatible with `amqp` if you use the `network` metrics. We recommend to disable the metrics with the following configuration in this case :\n\n```javascript\nio.init({\n  metrics: {\n    network: false\n  }\n})\n```\n",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2019 Keymetrics Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@pm2/io/-/io-4.3.5.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@pm2/io/-/io-4.3.5.tgz",
    "hash": "",
    "integrity": "sha512-CY/a6Nw72vrlp/FPx38l4jfEHp4gNEbo8i+WlSJ2cnWO6VE6CKmnC1zb4yQLvdP8f3EuzzoOBZVq6aGN20M82Q==",
    "registry": "npm",
    "packageName": "@pm2/io",
    "cacheIntegrity": "sha512-CY/a6Nw72vrlp/FPx38l4jfEHp4gNEbo8i+WlSJ2cnWO6VE6CKmnC1zb4yQLvdP8f3EuzzoOBZVq6aGN20M82Q== sha1-VwJauCH9CdKv5tCrmB+KOczsiGA="
  },
  "registry": "npm",
  "hash": "098fdae8dc3bdafae5a7f14fc77f25e237c41e9e203446e8f22f9695227672758ee9513a08a9a70b5cdbe3240bbdd3fc7f712ecf3a0e05956ae9a18ddb433cd9"
}