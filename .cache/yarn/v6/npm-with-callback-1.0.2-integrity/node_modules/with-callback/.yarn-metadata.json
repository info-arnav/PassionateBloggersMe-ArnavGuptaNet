{
  "manifest": {
    "name": "with-callback",
    "description": "A small helper function to bridge the gap when returning a promise from a function that takes a callback",
    "main": "index.js",
    "files": [
      "index.js"
    ],
    "scripts": {
      "test": "jest",
      "test-cov": "nyc ava --reporter=text --reporter=html",
      "semantic-release": "semantic-release pre && npm publish && semantic-release post"
    },
    "devDependencies": {
      "jest": "^16.0.2",
      "semantic-release": "^4.3.5"
    },
    "engines": {
      "node": ">=4"
    },
    "jest": {
      "testEnvironment": "node"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/dbrockman/with-callback.git"
    },
    "author": {
      "name": "David Brockman Smoliansky"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dbrockman/with-callback/issues"
    },
    "homepage": "https://github.com/dbrockman/with-callback#readme",
    "version": "1.0.2",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-with-callback-1.0.2-integrity/node_modules/with-callback/package.json",
    "readmeFilename": "README.md",
    "readme": "# with-callback\n\nA small helper function to bridge the gap when returning a promise from a function that takes a callback\n\n\nNote that this module will not introduce any custom Promise implementation.\nIt will use the global `Promise` (requires node >= v4).\n\n\n```js\nimport withCallback from 'with-callback';\n// or const withCallback = require('with-callback');\n\n\n// withCallback returns a promise and invokes the function with a callback\n// used to fulfill the promise\nfunction readFile(name) {\n  return withCallback(callback => fs.readFile(name, callback));\n}\n\n\n// arguments can also be passed as an array\nfunction readFile(name) {\n  return withCallback([name], fs.readFile);\n}\n\n\n// A second function can be passed to withCallback to map all arguments\n// passed to the callback to a single value used to resolve the promise.\nfunction example(callback) {\n  callback(null, 'a', 'b');\n}\nconst promise = withCallback(example, (a, b) => [a, b]);\n// promise resolves with ['a', 'b']\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 David Brockman Smoliansky\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/with-callback/-/with-callback-1.0.2.tgz",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/with-callback/-/with-callback-1.0.2.tgz",
    "hash": "",
    "integrity": "sha1-oJYpuakgAo1yFAT7Q1vc/1yRvCE=",
    "registry": "npm",
    "packageName": "with-callback",
    "cacheIntegrity": "sha512-zaUhn7OWgikdqWlPYpZ4rTX/6IAV0czMVyd+C6QLVrif2tATF28CYUnHBmHs2a5EaZo7bB1+plBUPHto+HW8uA== sha1-oJYpuakgAo1yFAT7Q1vc/1yRvCE="
  },
  "registry": "npm",
  "hash": "cda5219fb39682291da9694f629678ad35ffe88015d1cccc57277e0ba40b56b89fdad013176f026149c70661ecd9ae44699a3b6c1d7ea650543c7b68f875bcb8"
}