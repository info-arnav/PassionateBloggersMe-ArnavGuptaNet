{
  "manifest": {
    "name": "decimal.js",
    "description": "An arbitrary-precision Decimal type for JavaScript.",
    "version": "10.2.1",
    "keywords": [
      "arbitrary",
      "precision",
      "arithmetic",
      "big",
      "number",
      "decimal",
      "float",
      "biginteger",
      "bigdecimal",
      "bignumber",
      "bigint",
      "bignum"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/MikeMcl/decimal.js.git"
    },
    "main": "decimal",
    "module": "decimal.mjs",
    "browser": "decimal.js",
    "author": {
      "name": "Michael Mclaughlin",
      "email": "M8ch88l@gmail.com"
    },
    "license": "MIT",
    "scripts": {
      "test": "node ./test/test.js",
      "build": "uglifyjs decimal.js --source-map url=decimal.min.js.map -c -m -o decimal.min.js"
    },
    "types": "decimal.d.ts",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-decimal-js-10.2.1-238ae7b0f0c793d3e3cea410108b35a2c01426a3-integrity/node_modules/decimal.js/package.json",
    "readmeFilename": "README.md",
    "readme": "![decimal.js](https://raw.githubusercontent.com/MikeMcl/decimal.js/gh-pages/decimaljs.png)\n\nAn arbitrary-precision Decimal type for JavaScript.\n\n[![npm version](https://img.shields.io/npm/v/decimal.js.svg)](https://www.npmjs.com/package/decimal.js)\n[![npm downloads](https://img.shields.io/npm/dw/decimal.js)](https://www.npmjs.com/package/decimal.js)\n[![Build Status](https://travis-ci.org/MikeMcl/decimal.js.svg)](https://travis-ci.org/MikeMcl/decimal.js)\n[![CDNJS](https://img.shields.io/cdnjs/v/decimal.js.svg)](https://cdnjs.com/libraries/decimal.js)\n\n<br>\n\n## Features\n\n  - Integers and floats\n  - Simple but full-featured API\n  - Replicates many of the methods of JavaScript's `Number.prototype` and `Math` objects\n  - Also handles hexadecimal, binary and octal values\n  - Faster, smaller, and perhaps easier to use than JavaScript versions of Java's BigDecimal\n  - No dependencies\n  - Wide platform compatibility: uses JavaScript 1.5 (ECMAScript 3) features only\n  - Comprehensive [documentation](http://mikemcl.github.io/decimal.js/) and test set\n  - Includes a TypeScript declaration file: *decimal.d.ts*\n\n![API](https://raw.githubusercontent.com/MikeMcl/decimal.js/gh-pages/API.png)\n\nThe library is similar to [bignumber.js](https://github.com/MikeMcl/bignumber.js/), but here\nprecision is specified in terms of significant digits rather than decimal places, and all\ncalculations are rounded to the precision (similar to Python's decimal module) rather than just\nthose involving division.\n\nThis library also adds the trigonometric functions, among others, and supports non-integer powers,\nwhich makes it a significantly larger library than *bignumber.js* and the even smaller\n[big.js](https://github.com/MikeMcl/big.js/).\n\nFor a lighter version of this library without the trigonometric functions see [decimal.js-light](https://github.com/MikeMcl/decimal.js-light/).\n\n## Load\n\nThe library is the single JavaScript file *decimal.js* or ES module *decimal.mjs*.\n\nBrowser:\n\n```html\n<script src='path/to/decimal.js'></script>\n```\n\n```html\n<script type=\"module\">\nimport Decimal from './path/to/decimal.mjs';\n...\n</script>\n```\n\n[Node.js](http://nodejs.org):\n\n```bash\n$ npm install decimal.js\n```\n\n```js\nvar Decimal = require('decimal.js');\n```\n\nES module:\n\n```js\n//import Decimal from 'decimal.js';\nimport {Decimal} from 'decimal.js';\n```\n\nAMD loader libraries such as [requireJS](http://requirejs.org/):\n\n```js\nrequire(['decimal'], function(Decimal) {\n    // Use Decimal here in local scope. No global Decimal.\n});\n```\n\n## Use\n\n*In all examples below, `var`, semicolons and `toString` calls are not shown.\nIf a commented-out value is in quotes it means `toString` has been called on the preceding expression.*\n\nThe library exports a single function object, `Decimal`, the constructor of Decimal instances.\n\nIt accepts a value of type number, string or Decimal.\n\n```js\nx = new Decimal(123.4567)\ny = new Decimal('123456.7e-3')\nz = new Decimal(x)\nx.equals(y) && y.equals(z) && x.equals(z)        // true\n```\n\nA value can also be in binary, hexadecimal or octal if the appropriate prefix is included.\n\n```js\nx = new Decimal('0xff.f')            // '255.9375'\ny = new Decimal('0b10101100')        // '172'\nz = x.plus(y)                        // '427.9375'\n\nz.toBinary()                         // '0b110101011.1111'\nz.toBinary(13)                       // '0b1.101010111111p+8'\n```\n\nUsing binary exponential notation to create a Decimal with the value of `Number.MAX_VALUE`:\n\n```js\nx = new Decimal('0b1.1111111111111111111111111111111111111111111111111111p+1023')\n```\n\nA Decimal is immutable in the sense that it is not changed by its methods.\n\n```js\n0.3 - 0.1                     // 0.19999999999999998\nx = new Decimal(0.3)\nx.minus(0.1)                  // '0.2'\nx                             // '0.3'\n```\n\nThe methods that return a Decimal can be chained.\n\n```js\nx.dividedBy(y).plus(z).times(9).floor()\nx.times('1.23456780123456789e+9').plus(9876.5432321).dividedBy('4444562598.111772').ceil()\n```\n\nMany method names have a shorter alias.\n\n```js\nx.squareRoot().dividedBy(y).toPower(3).equals(x.sqrt().div(y).pow(3))         // true\nx.cmp(y.mod(z).neg()) == 1 && x.comparedTo(y.modulo(z).negated()) == 1        // true\n```\n\nLike JavaScript's Number type, there are `toExponential`, `toFixed` and `toPrecision` methods,\n\n```js\nx = new Decimal(255.5)\nx.toExponential(5)              // '2.55500e+2'\nx.toFixed(5)                    // '255.50000'\nx.toPrecision(5)                // '255.50'\n```\n\nand almost all of the methods of JavaScript's Math object are also replicated.\n\n```js\nDecimal.sqrt('6.98372465832e+9823')      // '8.3568682281821340204e+4911'\nDecimal.pow(2, 0.0979843)                // '1.0702770511687781839'\n```\n\nThere are `isNaN` and `isFinite` methods, as `NaN` and `Infinity` are valid `Decimal` values,\n\n```js\nx = new Decimal(NaN)                                           // 'NaN'\ny = new Decimal(Infinity)                                      // 'Infinity'\nx.isNaN() && !y.isNaN() && !x.isFinite() && !y.isFinite()      // true\n```\n\nand a `toFraction` method with an optional *maximum denominator* argument\n\n```js\nz = new Decimal(355)\npi = z.dividedBy(113)        // '3.1415929204'\npi.toFraction()              // [ '7853982301', '2500000000' ]\npi.toFraction(1000)          // [ '355', '113' ]\n```\n\nAll calculations are rounded according to the number of significant digits and rounding mode\nspecified by the `precision` and `rounding` properties of the Decimal constructor.\n\nFor advanced usage, multiple Decimal constructors can be created, each with their own independent configuration which\napplies to all Decimal numbers created from it.\n\n```js\n// Set the precision and rounding of the default Decimal constructor\nDecimal.set({ precision: 5, rounding: 4 })\n\n// Create another Decimal constructor, optionally passing in a configuration object\nDecimal9 = Decimal.clone({ precision: 9, rounding: 1 })\n\nx = new Decimal(5)\ny = new Decimal9(5)\n\nx.div(3)                           // '1.6667'\ny.div(3)                           // '1.66666666'\n```\n\nThe value of a Decimal is stored in a floating point format in terms of its digits, exponent and sign.\n\n```js\nx = new Decimal(-12345.67);\nx.d                            // [ 12345, 6700000 ]    digits (base 10000000)\nx.e                            // 4                     exponent (base 10)\nx.s                            // -1                    sign\n```\n\nFor further information see the [API](http://mikemcl.github.io/decimal.js/) reference in the *doc* directory.\n\n## Test\n\nThe library can be tested using Node.js or a browser.\n\nThe *test* directory contains the file *test.js* which runs all the tests when executed by Node,\nand the file *test.html* which runs all the tests when opened in a browser.\n\nTo run all the tests, from a command-line at the root directory using npm\n\n```bash\n$ npm test\n```\n\nor at the *test* directory using Node\n\n```bash\n$ node test\n```\n\nEach separate test module can also be executed individually, for example, at the *test/modules* directory\n\n```bash\n$ node toFraction\n```\n\n## Build\n\nFor Node, if [uglify-js](https://github.com/mishoo/UglifyJS2) is installed\n\n```bash\nnpm install uglify-js -g\n```\n\nthen\n\n```bash\nnpm run build\n```\n\nwill create *decimal.min.js*, and a source map will also be added to the *doc* directory.\n\n## Licence\n\nMIT.\n\nSee *LICENCE.md*\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/decimal.js/-/decimal.js-10.2.1.tgz#238ae7b0f0c793d3e3cea410108b35a2c01426a3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/decimal.js/-/decimal.js-10.2.1.tgz",
    "hash": "238ae7b0f0c793d3e3cea410108b35a2c01426a3",
    "integrity": "sha512-KaL7+6Fw6i5A2XSnsbhm/6B+NuEA7TZ4vqxnd5tXz9sbKtrN9Srj8ab4vKVdK8YAqZO9P1kg45Y6YLoduPf+kw==",
    "registry": "npm",
    "packageName": "decimal.js",
    "cacheIntegrity": "sha512-KaL7+6Fw6i5A2XSnsbhm/6B+NuEA7TZ4vqxnd5tXz9sbKtrN9Srj8ab4vKVdK8YAqZO9P1kg45Y6YLoduPf+kw== sha1-I4rnsPDHk9PjzqQQEIs1osAUJqM="
  },
  "registry": "npm",
  "hash": "238ae7b0f0c793d3e3cea410108b35a2c01426a3"
}