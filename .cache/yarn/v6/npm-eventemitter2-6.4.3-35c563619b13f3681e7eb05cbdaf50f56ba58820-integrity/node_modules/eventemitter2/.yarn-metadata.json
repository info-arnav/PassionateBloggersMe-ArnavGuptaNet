{
  "manifest": {
    "name": "eventemitter2",
    "version": "6.4.3",
    "description": "A feature-rich Node.js event emitter implementation with namespaces, wildcards, TTL, async listeners and browser/worker support.",
    "keywords": [
      "event",
      "events",
      "emitter",
      "eventemitter",
      "addEventListener",
      "addListener",
      "pub/sub",
      "emit",
      "emits",
      "on",
      "once",
      "publish",
      "subscribe"
    ],
    "author": {
      "name": "hij1nx",
      "email": "paolo@async.ly"
    },
    "contributors": [
      {
        "name": "Eric Elliott"
      },
      {
        "name": "Charlie Robbins",
        "email": "charlie@nodejitsu.com"
      },
      {
        "name": "Jameson Lee",
        "email": "jameson@nodejitsu.com"
      },
      {
        "name": "Jeroen van Duffelen",
        "email": "jvduf@nodejitsu.com"
      },
      {
        "name": "Fedor Indutny",
        "email": "fedor.indutny@gmail.com"
      }
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/hij1nx/EventEmitter2.git"
    },
    "devDependencies": {
      "benchmark": "^2.1.4",
      "bluebird": "^3.7.2",
      "coveralls": "^3.0.11",
      "mocha": "^7.1.1",
      "nodeunit": "*",
      "nyc": "^15.0.0"
    },
    "main": "./lib/eventemitter2.js",
    "scripts": {
      "test": "mocha ./test/loader.js --exit --timeout=3000",
      "test:legacy": "nodeunit test/simple/ test/wildcardEvents/",
      "test:coverage": "nyc --check-coverage npm run test",
      "coverage:report": "nyc report --reporter=html --reporter=text",
      "coveralls": "nyc report --reporter=text-lcov | coveralls",
      "benchmark": "node test/perf/benchmark.js",
      "prepublishOnly": "npm run test:coverage",
      "postversion": "git push && git push --tags"
    },
    "files": [
      "lib/eventemitter2.js",
      "index.js",
      "eventemitter2.d.ts"
    ],
    "typings": "./eventemitter2.d.ts",
    "typescript": {
      "definition": "./eventemitter2.d.ts"
    },
    "nyc": {
      "lines": 80,
      "functions": 80,
      "branches": 75,
      "statements": 80,
      "watermarks": {
        "lines": [
          80,
          95
        ],
        "functions": [
          80,
          95
        ],
        "branches": [
          80,
          95
        ],
        "statements": [
          80,
          95
        ]
      },
      "include": [
        "lib/**/*.js"
      ],
      "reporter": [
        "lcov",
        "text-summary"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-eventemitter2-6.4.3-35c563619b13f3681e7eb05cbdaf50f56ba58820-integrity/node_modules/eventemitter2/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Build Status](https://travis-ci.org/EventEmitter2/EventEmitter2.svg?branch=master)](https://travis-ci.org/EventEmitter2/EventEmitter2)\n[![Coverage Status](https://coveralls.io/repos/github/EventEmitter2/EventEmitter2/badge.svg?branch=v6.4.3)](https://coveralls.io/github/EventEmitter2/EventEmitter2?branch=v6.4.3)\n[![NPM version](https://badge.fury.io/js/eventemitter2.svg)](http://badge.fury.io/js/eventemitter2)\n[![Dependency Status](https://img.shields.io/david/asyncly/eventemitter2.svg)](https://david-dm.org/asyncly/eventemitter2)\n[![npm](https://img.shields.io/npm/dm/eventemitter2.svg?maxAge=2592000)]()\n\n# SYNOPSIS\n\nEventEmitter2 is an implementation of the EventEmitter module found in Node.js. \nIn addition to having a better benchmark performance than EventEmitter and being browser-compatible, \nit also extends the interface of EventEmitter with many additional non-breaking features.\n\nIf you like this project please show your support with a [GitHub :star:](https://github.com/EventEmitter2/EventEmitter2/stargazers)!\n\n# DESCRIPTION\n\n### FEATURES\n - ES5 compatible UMD module, that supports node.js, browser and workers of any kind\n - Namespaces/Wildcards\n - [Any](#emitteronanylistener) listeners\n - Times To Listen (TTL), extends the `once` concept with [`many`](#emittermanyevent--eventns-timestolisten-listener-options)\n - [Async listeners](#emitteronevent-listener-options-objectboolean) (using setImmediate|setTimeout|nextTick) with promise|async function support\n - The [emitAsync](#emitteremitasyncevent--eventns-arg1-arg2-) method to return the results of the listeners via Promise.all\n - Subscription methods ([on](#emitteronevent-listener-options-objectboolean), [once](#emitterprependoncelistenerevent--eventns-listener-options), [many](#emittermanyevent--eventns-timestolisten-listener-options), ...) can return a \n [listener](#listener) object that makes it easy to remove the subscription when needed - just call the listener.off() method.\n - Feature-rich [waitFor](#emitterwaitforevent--eventns-options) method to wait for events using promises\n - [listenTo](#listentotargetemitter-events-objectevent--eventns-function-options) & [stopListeningTo](#stoplisteningtotarget-object-event-event--eventns-boolean) methods\n for listening to an external event emitter of any kind and propagate its events through itself using optional reducers/filters \n - Extended version of the [events.once](#eventemitter2onceemitter-event--eventns-options) method from the [node events API](https://nodejs.org/api/events.html#events_events_once_emitter_name)\n - Browser & Workers environment compatibility\n - Demonstrates good performance in benchmarks\n\n```\nPlatform: win32, x64, 15267MB\nNode version: v13.11.0\nCPU: 4 x AMD Ryzen 3 2200U with Radeon Vega Mobile Gfx @ 2495MHz\n----------------------------------------------------------------\nEventEmitterHeatUp x 2,897,056 ops/sec ±3.86% (67 runs sampled)\nEventEmitter x 3,232,934 ops/sec ±3.50% (65 runs sampled)\nEventEmitter2 x 12,261,042 ops/sec ±4.72% (59 runs sampled)\nEventEmitter2 (wild) x 242,751 ops/sec ±5.15% (68 runs sampled)\nEventEmitter2 (wild) using plain events x 358,916 ops/sec ±2.58% (78 runs sampled)\nEventEmitter2 (wild) emitting ns x 1,837,323 ops/sec ±3.50% (72 runs sampled)\nEventEmitter2 (wild) emitting a plain event x 2,743,707 ops/sec ±4.08% (65 runs sampled)\nEventEmitter3 x 10,380,258 ops/sec ±3.93% (67 runs sampled)\n\nFastest is EventEmitter2\n```\n\n### What's new\n\nTo find out what's new see the project [CHANGELOG](https://github.com/EventEmitter2/EventEmitter2/blob/master/CHANGELOG.md)\n\n### Differences (Non-breaking, compatible with existing EventEmitter)\n\n - The EventEmitter2 constructor takes an optional configuration object with the following default values:\n```javascript\nvar EventEmitter2 = require('eventemitter2');\nvar emitter = new EventEmitter2({\n\n  // set this to `true` to use wildcards\n  wildcard: false,\n\n  // the delimiter used to segment namespaces\n  delimiter: '.', \n\n  // set this to `true` if you want to emit the newListener event\n  newListener: false, \n\n  // set this to `true` if you want to emit the removeListener event\n  removeListener: false, \n\n  // the maximum amount of listeners that can be assigned to an event\n  maxListeners: 10,\n\n  // show event name in memory leak message when more than maximum amount of listeners is assigned\n  verboseMemoryLeak: false,\n\n  // disable throwing uncaughtException if an error event is emitted and it has no listeners\n  ignoreErrors: false\n});\n```\n\n - Getting the actual event that fired.\n\n```javascript\nemitter.on('foo.*', function(value1, value2) {\n  console.log(this.event, value1, value2);\n});\n\nemitter.emit('foo.bar', 1, 2); // 'foo.bar' 1 2\nemitter.emit(['foo', 'bar'], 3, 4); // 'foo.bar' 3 4\n\nemitter.emit(Symbol(), 5, 6); // Symbol() 5 6\nemitter.emit(['foo', Symbol()], 7, 8); // ['foo', Symbol()] 7 8\n```\n**Note**: Generally this.event is normalized to a string ('event', 'event.test'),\nexcept the cases when event is a symbol or namespace contains a symbol. \nIn these cases this.event remains as is (symbol and array). \n\n - Fire an event N times and then remove it, an extension of the `once` concept.\n\n```javascript\nemitter.many('foo', 4, function() {\n  console.log('hello');\n});\n```\n\n - Pass in a namespaced event as an array rather than a delimited string.\n\n```javascript\nemitter.many(['foo', 'bar', 'bazz'], 4, function() {\n  console.log('hello');\n});\n```\n\n# Installing\n\n```console\n$ npm install eventemitter2\n```\n\nOr you can use unpkg.com CDN to import this [module](https://unpkg.com/eventemitter2) as a script directly from the browser \n\n# API\n\n### Types definition\n- `Event`: string | symbol\n- `EventNS`: string | Event []\n\n## Class EventEmitter2\n\n### instance:\n- [emit(event: event | eventNS, ...values: any[]): boolean](#emitteremitevent--eventns-arg1-arg2-);\n\n- [emitAsync(event: event | eventNS, ...values: any[]): Promise<any[]>](#emitteremitasyncevent--eventns-arg1-arg2-)\n\n- [addListener(event: event | eventNS, listener: ListenerFn, boolean|options?: object): this|Listener](#emitteraddlistenerevent-listener-options-objectboolean)\n\n- [on(event: event | eventNS, listener: ListenerFn, boolean|options?: object): this|Listener](#emitteraddlistenerevent-listener-options-objectboolean)\n\n- [once(event: event | eventNS, listener: ListenerFn, boolean|options?: object): this|Listener](#emitteronceevent--eventns-listener-options)\n\n- [many(event: event | eventNS, timesToListen: number, listener: ListenerFn, boolean|options?: object): this|Listener](#emittermanyevent--eventns-timestolisten-listener-options)\n\n- [prependMany(event: event | eventNS, timesToListen: number, listener: ListenerFn, boolean|options?: object): this|Listener](#emitterprependanylistener)\n\n- [prependOnceListener(event: event | eventNS, listener: ListenerFn, boolean|options?: object): this|Listener](#emitterprependoncelistenerevent--eventns-listener-options)\n\n- [prependListener(event: event | eventNS, listener: ListenerFn, boolean|options?: object): this|Listener](#emitterprependlistenerevent-listener-options)\n\n- [prependAny(listener: EventAndListener): this](#emitterprependanylistener)\n\n- [onAny(listener: EventAndListener): this](#emitteronanylistener)\n\n- [offAny(listener: ListenerFn): this](#emitteroffanylistener)\n\n- [removeListener(event: event | eventNS, listener: ListenerFn): this](#emitterremovelistenerevent--eventns-listener)\n\n- [off(event: event | eventNS, listener: ListenerFn): this](#emitteroffevent--eventns-listener)\n\n- [removeAllListeners(event?: event | eventNS): this](#emitterremovealllistenersevent--eventns)\n\n- [setMaxListeners(n: number): void](#emittersetmaxlistenersn)\n\n- [getMaxListeners(): number](#emittergetmaxlisteners)\n\n- [eventNames(nsAsArray?: boolean): string[]](#emittereventnamesnsasarray)\n\n- [listeners(event: event | eventNS): ListenerFn[]](#emitterlistenersevent--eventns)\n\n- [listenersAny(): ListenerFn[]](#emitterlistenersany)\n\n- [hasListeners(event?: event | eventNS): Boolean](#haslistenersevent--eventnsstringboolean)\n\n- [waitFor(event: event | eventNS, timeout?: number): CancelablePromise<any[]>](#emitterwaitforevent--eventns-timeout)\n\n- [waitFor(event: event | eventNS, filter?: WaitForFilter): CancelablePromise<any[]>](#emitterwaitforevent--eventns-filter)\n\n- [waitFor(event: event | eventNS, options?: WaitForOptions): CancelablePromise<any[]>](#emitterwaitforevent--eventns-options)\n\n- [listenTo(target: GeneralEventEmitter, event: event | eventNS, options?: ListenToOptions): this](#listentotargetemitter-events-objectevent--eventns-function-options)\n\n- [listenTo(target: GeneralEventEmitter, events: (event | eventNS)[], options?: ListenToOptions): this](#listentotargetemitter-events-event--eventns-options)\n\n- [listenTo(target: GeneralEventEmitter, events: Object<event | eventNS, Function>, options?: ListenToOptions): this](#listentotargetemitter-events-objectevent--eventns-function-options)\n\n- [stopListeningTo(target?: GeneralEventEmitter, event?: event | eventNS): Boolean](#stoplisteningtarget-object-event-event--eventns-boolean)\n\n### static:\n\n- [static once(emitter: EventEmitter2, event: string | symbol, options?: OnceOptions): CancelablePromise<any[]>](#eventemitter2onceemitter-event--eventns-options)\n\n- [static defaultMaxListeners: number](#eventemitter2defaultmaxlisteners)\n\nThe `event` argument specified in the API declaration can be a string or symbol for a simple event emitter\nand a string|symbol|Array(string|symbol) in a case of a wildcard emitter; \n\nWhen an `EventEmitter` instance experiences an error, the typical action is\nto emit an `error` event. Error events are treated as a special case.\nIf there is no listener for it, then the default action is to print a stack\ntrace and exit the program.\n\nAll EventEmitters emit the event `newListener` when new listeners are\nadded. EventEmitters also emit the event `removeListener` when listeners are\nremoved, and `removeListenerAny` when listeners added through `onAny` are\nremoved.\n\n\n**Namespaces** with **Wildcards**\nTo use namespaces/wildcards, pass the `wildcard` option into the EventEmitter \nconstructor. When namespaces/wildcards are enabled, events can either be \nstrings (`foo.bar`) separated by a delimiter or arrays (`['foo', 'bar']`). The \ndelimiter is also configurable as a constructor option.\n\nAn event name passed to any event emitter method can contain a wild card (the \n`*` character). If the event name is a string, a wildcard may appear as `foo.*`. \nIf the event name is an array, the wildcard may appear as `['foo', '*']`.\n\nIf either of the above described events were passed to the `on` method, \nsubsequent emits such as the following would be observed...\n\n```javascript\nemitter.emit(Symbol());\nemitter.emit('foo');\nemitter.emit('foo.bazz');\nemitter.emit(['foo', 'bar']);\nemitter.emit(['foo', Symbol()]);\n```\n\n**NOTE:** An event name may use more than one wildcard. For example, \n`foo.*.bar.*` is a valid event name, and would match events such as\n`foo.x.bar.y`, or `['foo', 'bazz', 'bar', 'test']` \n\n# Multi-level Wildcards\nA double wildcard (the string `**`) matches any number of levels (zero or more) of events. So if for example `'foo.**'` is passed to the `on` method, the following events would be observed:\n\n````javascript\nemitter.emit('foo');\nemitter.emit('foo.bar');\nemitter.emit('foo.bar.baz');\nemitter.emit(['foo', Symbol(), 'baz']);\n````\n\nOn the other hand, if the single-wildcard event name was passed to the on method, the callback would only observe the second of these events.\n\n\n### emitter.addListener(event, listener, options?: object|boolean)\n### emitter.on(event, listener, options?: object|boolean)\n\nAdds a listener to the end of the listeners array for the specified event.\n\n```javascript\nemitter.on('data', function(value1, value2, value3, ...) {\n  console.log('The event was raised!');\n});\n```\n```javascript\nemitter.on('data', function(value) {\n  console.log('The event was raised!');\n});\n```\n\n**Options:**\n\n- `async:boolean= false`- invoke the listener in async mode using setImmediate (fallback to setTimeout if not available)\nor process.nextTick depending on the `nextTick` option.\n\n- `nextTick:boolean= false`- use process.nextTick instead of setImmediate to invoke the listener asynchronously. \n\n- `promisify:boolean= false`- additionally wraps the listener to a Promise for later invocation using `emitAsync` method.\nThis option will be activated by default if its value is `undefined`\nand the listener function is an `asynchronous function` (whose constructor name is `AsyncFunction`). \n\n- `objectify:boolean= false`- activates returning a [listener](#listener) object instead of 'this' by the subscription method.\n\n#### listener\nThe listener object has the following properties:\n- `emitter: EventEmitter2` - reference to the event emitter instance\n- `event: event|eventNS` - subscription event\n- `listener: Function` - reference to the listener\n- `off(): Function`- removes the listener (voids the subscription)\n\n````javascript\nvar listener= emitter.on('event', function(){\n  console.log('hello!');\n}, {objectify: true});\n\nemitter.emit('event');\n\nlistener.off();\n````\n\n**Note:** If the options argument is `true` it will be considered as `{promisify: true}`\n\n**Note:** If the options argument is `false` it will be considered as `{async: true}`\n\n```javascript\nvar EventEmitter2= require('eventemitter2');\nvar emitter= new EventEmitter2();\n\nemitter.on('event', function(){\n    console.log('The event was raised!');\n}, {async: true});\n\nemitter.emit('event');\nconsole.log('emitted');\n```\nSince the `async` option was set the output from the code above is as follows:\n````\nemitted\nThe event was raised!\n````\n\nIf the listener is an async function or function which returns a promise, use the `promisify` option as follows:\n\n```javascript\nvar EventEmitter2= require('eventemitter2');\nvar emitter= new EventEmitter2();\n\nemitter.on('event', function(){\n    console.log('The event was raised!');\n    return new Promise(function(resolve){\n       console.log('listener resolved');\n       setTimeout(resolve, 1000);\n    });\n}, {promisify: true});\n\nemitter.emitAsync('event').then(function(){\n    console.log('all listeners were resolved!');\n});\n\nconsole.log('emitted');\n````\nOutput:\n````\nemitted\nThe event was raised!\nlistener resolved\nall listeners were resolved!\n````\nIf the `promisify` option is false (default value) the output of the same code is as follows:\n````\nThe event was raised!\nlistener resolved\nemitted\nall listeners were resolved!\n````\n\n\n### emitter.prependListener(event, listener, options?)\n\nAdds a listener to the beginning of the listeners array for the specified event.\n\n```javascript\nemitter.prependListener('data', function(value1, value2, value3, ...) {\n  console.log('The event was raised!');\n});\n```\n\n**options:**\n\n`options?`: See the [addListener options](#emitteronevent-listener-options-objectboolean)\n\n### emitter.onAny(listener)\n\nAdds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the callback.\n\n```javascript\nemitter.onAny(function(event, value) {\n  console.log('All events trigger this.');\n});\n```\n\n### emitter.prependAny(listener)\n\nAdds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the callback. The listener is added to the beginning of the listeners array\n\n```javascript\nemitter.prependAny(function(event, value) {\n  console.log('All events trigger this.');\n});\n```\n\n### emitter.offAny(listener)\n\nRemoves the listener that will be fired when any event is emitted.\n\n```javascript\nemitter.offAny(function(value) {\n  console.log('The event was raised!');\n});\n```\n\n#### emitter.once(event | eventNS, listener, options?)\n\nAdds a **one time** listener for the event. The listener is invoked \nonly the first time the event is fired, after which it is removed.\n\n```javascript\nemitter.once('get', function (value) {\n  console.log('Ah, we have our first value!');\n});\n```\n\n**options:**\n\n`options?`: See the [addListener options](#emitteronevent-listener-options-objectboolean)\n\n#### emitter.prependOnceListener(event | eventNS, listener, options?)\n\nAdds a **one time** listener for the event. The listener is invoked \nonly the first time the event is fired, after which it is removed.\nThe listener is added to the beginning of the listeners array\n\n```javascript\nemitter.prependOnceListener('get', function (value) {\n  console.log('Ah, we have our first value!');\n});\n```\n\n**options:**\n\n`options?`: See the [addListener options](#emitteronevent-listener-options-objectboolean)\n\n### emitter.many(event | eventNS, timesToListen, listener, options?)\n\nAdds a listener that will execute **n times** for the event before being\nremoved. The listener is invoked only the first **n times** the event is \nfired, after which it is removed.\n\n```javascript\nemitter.many('get', 4, function (value) {\n  console.log('This event will be listened to exactly four times.');\n});\n```\n\n**options:**\n\n`options?`: See the [addListener options](#emitteronevent-listener-options-objectboolean)\n\n### emitter.prependMany(event | eventNS, timesToListen, listener, options?)\n\nAdds a listener that will execute **n times** for the event before being\nremoved. The listener is invoked only the first **n times** the event is \nfired, after which it is removed.\nThe listener is added to the beginning of the listeners array.\n\n```javascript\nemitter.many('get', 4, function (value) {\n  console.log('This event will be listened to exactly four times.');\n});\n```\n\n**options:**\n\n`options?`: See the [addListener options](#emitteronevent-listener-options-objectboolean)\n\n### emitter.removeListener(event | eventNS, listener)\n### emitter.off(event | eventNS, listener)\n\nRemove a listener from the listener array for the specified event. \n**Caution**: Calling this method changes the array indices in the listener array behind the listener.\n\n```javascript\nvar callback = function(value) {\n  console.log('someone connected!');\n};\nemitter.on('get', callback);\n// ...\nemitter.removeListener('get', callback);\n```\n\n\n### emitter.removeAllListeners([event | eventNS])\n\nRemoves all listeners, or those of the specified event.\n\n\n### emitter.setMaxListeners(n)\n\nBy default EventEmitters will print a warning if more than 10 listeners \nare added to it. This is a useful default which helps finding memory leaks. \nObviously not all Emitters should be limited to 10. This function allows \nthat to be increased. Set to zero for unlimited.\n\n\n### emitter.getMaxListeners()\n\nReturns the current max listener value for the EventEmitter which is either set by emitter.setMaxListeners(n) or defaults to EventEmitter2.defaultMaxListeners\n\n\n### emitter.listeners(event | eventNS)\n\nReturns an array of listeners for the specified event. This array can be \nmanipulated, e.g. to remove listeners.\n\n```javascript\nemitter.on('get', function(value) {\n  console.log('someone connected!');\n});\nconsole.log(emitter.listeners('get')); // [ [Function] ]\n```\n\n### emitter.listenersAny()\n\nReturns an array of listeners that are listening for any event that is \nspecified. This array can be manipulated, e.g. to remove listeners.\n\n```javascript\nemitter.onAny(function(value) {\n  console.log('someone connected!');\n});\nconsole.log(emitter.listenersAny()[0]); // [ [Function] ]\n```\n\n### emitter.emit(event | eventNS, [arg1], [arg2], [...])\nExecute each of the listeners that may be listening for the specified event \nname in order with the list of arguments.\n\n### emitter.emitAsync(event | eventNS, [arg1], [arg2], [...])\n\nReturn the results of the listeners via [Promise.all](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise/all).\nOnly this method doesn't work [IE](http://caniuse.com/#search=promise).\n\n```javascript\nemitter.on('get',function(i) {\n  return new Promise(function(resolve){\n    setTimeout(function(){\n      resolve(i+3);\n    },50);\n  });\n});\nemitter.on('get',function(i) {\n  return new Promise(function(resolve){\n    resolve(i+2)\n  });\n});\nemitter.on('get',function(i) {\n  return Promise.resolve(i+1);\n});\nemitter.on('get',function(i) {\n  return i+0;\n});\nemitter.on('get',function(i) {\n  // noop\n});\n\nemitter.emitAsync('get',0)\n.then(function(results){\n  console.log(results); // [3,2,1,0,undefined]\n});\n```\n\n### emitter.waitFor(event | eventNS, [options])\n### emitter.waitFor(event | eventNS, [timeout])\n### emitter.waitFor(event | eventNS, [filter])\n\nReturns a thenable object (promise interface) that resolves when a specific event occurs\n\n````javascript\nemitter.waitFor('event').then(function (data) { \n    console.log(data); // ['bar']\n});\n\nemitter.emit('event', 'bar');\n````\n\n````javascript\nemitter.waitFor('event', { \n    // handle first event data argument as an error (err, ...data)\n    handleError: false,\n    // the timeout for resolving the promise before it is rejected with an error (Error: timeout).\n    timeout: 0, \n    //filter function to determine acceptable values for resolving the promise.\n    filter: function(arg0, arg1){ \n        return arg0==='foo' && arg1==='bar'\n    },\n    Promise: Promise, // Promise constructor to use,\n    overload: false // overload cancellation api in a case of external Promise class\n}).then(function(data){\n    console.log(data); // ['foo', 'bar']\n});\n\nemitter.emit('event', 'foo', 'bar')\n````\n\n````javascript\nvar promise= emitter.waitFor('event');\n\npromise.then(null, function(error){\n    console.log(error); //Error: canceled\n});\n\npromise.cancel(); //stop listening the event and reject the promise\n````\n\n````javascript\nemitter.waitFor('event', {\n    handleError: true\n}).then(null, function(error){\n    console.log(error); //Error: custom error\n});\n\nemitter.emit('event', new Error('custom error')); // reject the promise\n````\n### emitter.eventNames(nsAsArray)\n\nReturns an array listing the events for which the emitter has registered listeners.\n```javascript\nvar emitter= new EventEmitter2();\nemitter.on('foo', () => {});\nemitter.on('bar', () => {});\nemitter.on(Symbol('test'), () => {});\nemitter.on(['foo', Symbol('test2')], () => {});\n\nconsole.log(emitter.eventNames());\n// Prints: [ 'bar', 'foo', [ 'foo', Symbol(test2) ], [ 'foo', Symbol(test2) ] ]\n```\n**Note**: Listeners order not guaranteed\n### listenTo(targetEmitter, events: event | eventNS, options?)\n\n### listenTo(targetEmitter, events: (event | eventNS)[], options?)\n\n### listenTo(targetEmitter, events: Object<event | eventNS, Function>, options?)\n\nListens to the events emitted by an external emitter and propagate them through itself.\nThe target object could be of any type that implements methods for subscribing and unsubscribing to its events. \nBy default this method attempts to use `addListener`/`removeListener`, `on`/`off` and `addEventListener`/`removeEventListener` pairs,\nbut you able to define own hooks `on(event, handler)` and `off(event, handler)` in the options object to use\ncustom subscription API. In these hooks `this` refers to the target object.\n\nThe options object has the following interface:\n- `on(event, handler): void`\n- `off(event, handler): void`\n- `reducer: (Function) | (Object<Function>): Boolean`\n\nIn case you selected the `newListener` and `removeListener` options when creating the emitter, \nthe subscription to the events of the target object will be conditional, \ndepending on whether there are listeners in the emitter that could listen them.\n\n````javascript\nvar EventEmitter2 = require('EventEmitter2');\nvar http = require('http');\n\nvar server = http.createServer(function(request, response){\n    console.log(request.url);\n    response.end('Hello Node.js Server!')\n}).listen(3000);\n\nserver.on('connection', function(req, socket, head){\n   console.log('connect');\n});\n\n// activate the ability to attach listeners on demand \nvar emitter= new EventEmitter2({\n    newListener: true,\n    removeListener: true\n});\n\nemitter.listenTo(server, {\n    'connection': 'localConnection',\n    'close': 'close'\n}, {\n    reducers: {\n        connection: function(event){\n            console.log('event name:' + event.name); //'localConnection'\n            console.log('original event name:' + event.original); //'connection'\n            return event.data[0].remoteAddress==='::1';\n        }\n    }\n});\n\nemitter.on('localConnection', function(socket){\n   console.log('local connection', socket.remoteAddress);\n});\n\nsetTimeout(function(){\n    emitter.stopListeningTo(server);\n}, 30000);\n````\nAn example of using a wildcard emitter in a browser:\n````javascript\nconst ee= new EventEmitter2({\n   wildcard: true\n});\n\nee.listenTo(document.querySelector('#test'), {\n   'click': 'div.click',\n   'mouseup': 'div.mouseup',\n   'mousedown': 'div.mousedown'\n});\n\nee.on('div.*', function(evt){\n    console.log('listenTo: '+ evt.type);\n});\n\nsetTimeout(function(){\n    ee.stopListeningTo(document.querySelector('#test'));\n}, 30000);\n````\n\n### stopListeningTo(target?: Object, event: event | eventNS): Boolean\n\nStops listening the targets. Returns true if some listener was removed.\n\n### hasListeners(event | eventNS?:String):Boolean\n\nChecks whether emitter has any listeners.\n\n### emitter.listeners(event | eventNS)\n\nReturns the array of listeners for the event named eventName.\nIn wildcard mode this method returns namespaces as strings:\n````javascript\nvar emitter= new EventEmitter2({\n    wildcard: true\n});\nemitter.on('a.b.c', function(){});\nemitter.on(['z', 'x', 'c'], function(){});\nconsole.log(emitter.eventNames()) // [ 'z.x.c', 'a.b.c' ]\n````\nIf some namespace contains a Symbol member or the `nsAsArray` option is set the method will return namespace as an array of its members;\n````javascript\nvar emitter= new EventEmitter2({\n    wildcard: true\n});\nemitter.on('a.b.c', function(){});\nemitter.on(['z', 'x', Symbol()], function(){});\nconsole.log(emitter.eventNames()) // [ [ 'z', 'x', Symbol() ], 'a.b.c' ]\n````\n\n### EventEmitter2.once(emitter, event | eventNS, [options])\nCreates a cancellable Promise that is fulfilled when the EventEmitter emits the given event or that is rejected\nwhen the EventEmitter emits 'error'. \nThe Promise will resolve with an array of all the arguments emitted to the given event.\nThis method is intentionally generic and works with the web platform EventTarget interface,\nwhich has no special 'error' event semantics and does not listen to the 'error' event.\n\nBasic example:\n````javascript\nvar emitter= new EventEmitter2();\n\nEventEmitter2.once(emitter, 'event', {\n    timeout: 0,\n    Promise: Promise, // a custom Promise constructor\n    overload: false // overload promise cancellation api if exists with library implementation\n}).then(function(data){\n    console.log(data); // [1, 2, 3]\n});\n\nemitter.emit('event', 1, 2, 3);\n````\nWith timeout option:\n````javascript\nEventEmitter2.once(emitter, 'event', {\n    timeout: 1000\n}).then(null, function(err){\n    console.log(err); // Error: timeout\n});\n````\nThe library promise cancellation API:\n````javascript\npromise= EventEmitter2.once(emitter, 'event');\n// notice: the cancel method exists only in the first promise chain\npromise.then(null, function(err){\n    console.log(err); // Error: canceled\n});\n\npromise.cancel();\n````\nUsing the custom Promise class (**[bluebird.js](https://www.npmjs.com/package/bluebird)**):\n````javascript\nvar BBPromise = require(\"bluebird\");\n\nEventEmitter2.once(emitter, 'event', {\n    Promise: BBPromise\n}).then(function(data){\n    console.log(data); // [4, 5, 6]\n});\n\nemitter.emit('event', 4, 5, 6);\n````\n\n````javascript\nvar BBPromise = require(\"bluebird\");\n\nBBPromise.config({\n    // if false or options.overload enabled, the library cancellation API will be used\n    cancellation: true \n});\n\nvar promise= EventEmitter2.once(emitter, 'event', {\n    Promise: BBPromise,\n    overload: false // use bluebird cancellation API\n}).then(function(data){\n    // notice: never executed due to BlueBird cancellation logic\n}, function(err){\n    // notice: never executed due to BlueBird cancellation logic\n});\n\npromise.cancel();\n\nemitter.emit('event', 'never handled');\n````\n\n### EventEmitter2.defaultMaxListeners\n\nSets default max listeners count globally for all instances, including those created before the change is made.\n",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2016 Paolo Fragomeni <http://www.github.com/0x00a> and Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy \nof this software and associated documentation files (the 'Software'), to deal \nin the Software without restriction, including without limitation the rights \nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell \ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION \nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eventemitter2/-/eventemitter2-6.4.3.tgz#35c563619b13f3681e7eb05cbdaf50f56ba58820",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eventemitter2/-/eventemitter2-6.4.3.tgz",
    "hash": "35c563619b13f3681e7eb05cbdaf50f56ba58820",
    "integrity": "sha512-t0A2msp6BzOf+QAcI6z9XMktLj52OjGQg+8SJH6v5+3uxNpWYRR3wQmfA+6xtMU9kOC59qk9licus5dYcrYkMQ==",
    "registry": "npm",
    "packageName": "eventemitter2",
    "cacheIntegrity": "sha512-t0A2msp6BzOf+QAcI6z9XMktLj52OjGQg+8SJH6v5+3uxNpWYRR3wQmfA+6xtMU9kOC59qk9licus5dYcrYkMQ== sha1-NcVjYZsT82gefrBcva9Q9WuliCA="
  },
  "registry": "npm",
  "hash": "35c563619b13f3681e7eb05cbdaf50f56ba58820"
}